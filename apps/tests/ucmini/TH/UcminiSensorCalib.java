/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'UcminiSensorCalib'
 * message type.
 */

public class UcminiSensorCalib extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 12;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 11;

    /** Create a new UcminiSensorCalib of size 12. */
    public UcminiSensorCalib() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new UcminiSensorCalib of the given data_length. */
    public UcminiSensorCalib(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UcminiSensorCalib with the given data_length
     * and base offset.
     */
    public UcminiSensorCalib(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UcminiSensorCalib using the given byte array
     * as backing store.
     */
    public UcminiSensorCalib(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UcminiSensorCalib using the given byte array
     * as backing store, with the given base offset.
     */
    public UcminiSensorCalib(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UcminiSensorCalib using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public UcminiSensorCalib(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UcminiSensorCalib embedded in the given message
     * at the given base offset.
     */
    public UcminiSensorCalib(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UcminiSensorCalib embedded in the given message
     * at the given base offset and length.
     */
    public UcminiSensorCalib(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <UcminiSensorCalib> \n";
      try {
        s += "  [coefficient=";
        for (int i = 0; i < 6; i++) {
          s += "0x"+Long.toHexString(getElement_coefficient(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: coefficient
    //   Field type: int[], unsigned
    //   Offset (bits): 0
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'coefficient' is signed (false).
     */
    public static boolean isSigned_coefficient() {
        return false;
    }

    /**
     * Return whether the field 'coefficient' is an array (true).
     */
    public static boolean isArray_coefficient() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'coefficient'
     */
    public static int offset_coefficient(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 6) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'coefficient'
     */
    public static int offsetBits_coefficient(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 6) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'coefficient' as a int[]
     */
    public int[] get_coefficient() {
        int[] tmp = new int[6];
        for (int index0 = 0; index0 < numElements_coefficient(0); index0++) {
            tmp[index0] = getElement_coefficient(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'coefficient' from the given int[]
     */
    public void set_coefficient(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_coefficient(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'coefficient'
     */
    public int getElement_coefficient(int index1) {
        return (int)getUIntBEElement(offsetBits_coefficient(index1), 16);
    }

    /**
     * Set an element of the array 'coefficient'
     */
    public void setElement_coefficient(int index1, int value) {
        setUIntBEElement(offsetBits_coefficient(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'coefficient'
     */
    public static int totalSize_coefficient() {
        return (96 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'coefficient'
     */
    public static int totalSizeBits_coefficient() {
        return 96;
    }

    /**
     * Return the size, in bytes, of each element of the array 'coefficient'
     */
    public static int elementSize_coefficient() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'coefficient'
     */
    public static int elementSizeBits_coefficient() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'coefficient'
     */
    public static int numDimensions_coefficient() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'coefficient'
     */
    public static int numElements_coefficient() {
        return 6;
    }

    /**
     * Return the number of elements in the array 'coefficient'
     * for the given dimension.
     */
    public static int numElements_coefficient(int dimension) {
      int array_dims[] = { 6,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
