<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="6:TH20SensorC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4042dba8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40422770"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40422770"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40443f28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="10:TH20SensorC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x4042cd98"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405b64a0"/></to>
    </wire>
    <wire loc="47:/opt/tinyos/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x405b64a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405b3f00"/></to>
    </wire>
    <wire loc="13:TH20SensorC.nc">
      <from><interface-ref name="Temperature" scoped="" ref="0x404313b0"/></from>
      <to><interface-ref name="Temperature" scoped="" ref="0x40923120"/></to>
    </wire>
    <wire loc="12:/opt/tinyos/tos/platforms/ucmini/chips/sht21/SensirionSht11C.nc">
      <from><interface-ref name="Temperature" scoped="" ref="0x40923120"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40bd6428"/></to>
    </wire>
    <wire loc="14:TH20SensorC.nc">
      <from><interface-ref name="Humidity" scoped="" ref="0x4042a0b8"/></from>
      <to><interface-ref name="Humidity" scoped="" ref="0x40923d48"/></to>
    </wire>
    <wire loc="14:/opt/tinyos/tos/platforms/ucmini/chips/sht21/SensirionSht11C.nc">
      <from><interface-ref name="Humidity" scoped="" ref="0x40923d48"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40bd4958"/></to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x40443f28"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40584210"/></to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40578010"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40450470"/></to>
    </wire>
    <wire loc="48:/opt/tinyos/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40450470"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40acb6b8"/></to>
    </wire>
    <wire loc="54:/opt/tinyos/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x405ac5a0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40561cb0"/></to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x40ac73b8"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40acfca8"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40acfca8"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40ae7d38"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40ac8180"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40529e90"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40529e90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x405317f0"/></to>
    </wire>
    <wire loc="48:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <from><interface-ref name="TimerInit" scoped="" ref="0x404829c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408882c0"/></to>
    </wire>
    <wire loc="48:/opt/tinyos/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <from><interface-ref name="TimerInit" scoped="" ref="0x404829c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405135b8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="TimerInit" scoped="" ref="0x404829c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40ae7900"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="AtmegaCounter" scoped="" ref="0x40ae5750"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40484a58"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40484a58"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x404b19d8"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="AtmegaCompare" scoped="" ref="0x40ae37c8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x404a4e68"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x404825b8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40481820"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="TimerInit" scoped="" ref="0x4048a030"/></from>
      <to><interface-ref name="TimerInit" scoped="" ref="0x404829c0"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="AdcInit" scoped="" ref="0x4048a3e0"/></from>
      <to><interface-ref name="AdcInit" scoped="" ref="0x40482d70"/></to>
    </wire>
    <wire loc="54:/opt/tinyos/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="RadioInit" scoped="" ref="0x4048a7a8"/></from>
      <to><interface-ref name="RFA1RadioOff" scoped="" ref="0x4048b240"/></to>
    </wire>
    <wire loc="55:/opt/tinyos/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x40481c48"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40497118"/></to>
    </wire>
    <wire loc="55:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="SfdCapture" scoped="" ref="0x404ab138"/></from>
      <to><interface-ref name="SfdCapture" scoped="" ref="0x404bc6c8"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x404a4e68"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x404b9b98"/></to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x404a4e68"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x404b6f10"/></to>
    </wire>
    <wire loc="54:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x404a4e68"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x404be320"/></to>
    </wire>
    <wire loc="58:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x404c5ae8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x4040c1a8"/></to>
    </wire>
    <wire loc="54:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x4040be50"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x40a3bd18"/></to>
    </wire>
    <wire loc="57:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x4040be50"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x408bb970"/></to>
    </wire>
    <wire loc="76:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x4040be50"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x4083f010"/></to>
    </wire>
    <wire loc="59:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x4040be50"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x404c56f8"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4051f518"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x405139f0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <from><interface-ref name="AtmegaCounter" scoped="" ref="0x4051ec38"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40484a58"/></to>
    </wire>
    <wire loc="48:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x40530ae8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x4051f518"/></to>
    </wire>
    <wire loc="74:/opt/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x405879a8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x405aa798"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:/opt/tinyos/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x405d4010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405b3bb8"/></to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x405be060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x405b27a0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x405b27a0"/></from>
      <to><interface-ref name="PortE2" scoped="" ref="0x405f1750"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x405bea48"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x405d7200"/></to>
    </wire>
    <wire loc="62:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x405d7200"/></from>
      <to><interface-ref name="PortE3" scoped="" ref="0x405f0210"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x405bd4a0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x405d7be8"/></to>
    </wire>
    <wire loc="63:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x405d7be8"/></from>
      <to><interface-ref name="PortE4" scoped="" ref="0x405f0c08"/></to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Led3" scoped="" ref="0x405bde88"/></from>
      <to><interface-ref name="Led3" scoped="" ref="0x405d6660"/></to>
    </wire>
    <wire loc="64:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="Led3" scoped="" ref="0x405d6660"/></from>
      <to><interface-ref name="PortE5" scoped="" ref="0x405ef670"/></to>
    </wire>
    <wire loc="152:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x405f1750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4061d7a8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x405ef670"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4061d7a8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x405f0210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4061d7a8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x405f0c08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4061d7a8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x40635780"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405d4010"/></to>
    </wire>
    <wire loc="172:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x405f9670"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x406278a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x405e5b98"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40610f28"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x405ea2f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40619068"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x405f6c08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x406278a0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="112:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x405df750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405f3498"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x405ecea8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40619068"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="117:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x405dec08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40605dc0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x405e92f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40613690"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x405e3a98"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40610f28"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x405ed0a0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4061d7a8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="107:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x405d13d0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405f3498"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="120:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x405dca98"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40605dc0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x405e7210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40613690"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x405e18e0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40610f28"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x405fa210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40619068"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x405f7750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x406278a0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x405f2ce8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4061d7a8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="110:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x405e02f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405f3498"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="123:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x405da930"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40605dc0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x405f82f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x406278a0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="128:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x405d9dc8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40613690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x405e4670"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40610f28"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x405eace8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40619068"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="113:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x405de210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405f3498"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x405dd670"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40605dc0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x405e9ce8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40613690"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x405e24b0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40610f28"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x405eda98"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4061d7a8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x405d1dc8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405f3498"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x405db4b0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40605dc0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x405e7c08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40613690"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x405fac08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40619068"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x405e50a0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40610f28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x405eb8e0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40619068"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x405f6210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x406278a0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="111:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x405e0ce8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405f3498"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="124:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x405d93d0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40605dc0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x405ec4b0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40619068"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x405d8830"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40613690"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x405e30a0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40610f28"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="166:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x405fb750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40619068"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x405d4958"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405f3498"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="119:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x405dc0a0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40605dc0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x405e8750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40613690"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="145:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x405e2ea8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40610f28"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x405f8ce8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x406278a0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x405f22f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4061d7a8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x405e6670"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40613690"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x405d0830"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405f3498"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x405dbf28"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40605dc0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:/opt/tinyos/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40638bf8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40647a48"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x40635010"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x404929c8"/></to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x40646238"/></from>
      <to><interface-ref name="LedsInit" scoped="" ref="0x40635780"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="McuInit" scoped="" ref="0x40647e38"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x404825b8"/></to>
    </wire>
    <wire loc="56:/opt/tinyos/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="Stm25pInit" scoped="" ref="0x40646608"/></from>
      <to><interface-ref name="Stm25pOff" scoped="" ref="0x40634df0"/></to>
    </wire>
    <wire loc="40:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/Stm25pOffC.nc">
      <from><interface-ref name="Stm25pOff" scoped="" ref="0x40634df0"/></from>
      <to><interface-ref name="Stm25pOff" scoped="" ref="0x40641678"/></to>
    </wire>
    <wire loc="43:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/Stm25pOffC.nc">
      <from><interface-ref name="Toggle" scoped="" ref="0x40641a70"/></from>
      <to><interface-ref name="Power" scoped="" ref="0x4064d4c8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <from><interface-ref name="Power" scoped="" ref="0x4064d4c8"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x405e2ea8"/></to>
    </wire>
    <wire loc="56:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x4064e010"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x405dec08"/></to>
    </wire>
    <wire loc="61:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <from><interface-ref name="Hold" scoped="" ref="0x4064ea18"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x40655d30"/></to>
    </wire>
    <wire loc="41:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlC.nc">
      <from><interface-ref name="ControlInt" scoped="" ref="0x4066bb10"/></from>
      <to><interface-ref name="GpioInterrupt" scoped="" ref="0x4065eb10"/></to>
    </wire>
    <wire loc="44:/opt/tinyos/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <from><interface-ref name="GpioInterrupt" scoped="" ref="0x4065eb10"/></from>
      <to><interface-ref name="GpioInterrupt" scoped="" ref="0x4066f3d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="42:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlC.nc">
      <from><interface-ref name="ControlPin" scoped="" ref="0x4065c258"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x406721d0"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x406721d0"/></from>
      <to><interface-ref name="PortB5" scoped="" ref="0x405dbf28"/></to>
    </wire>
    <wire loc="43:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x4066ed30"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x406745a0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x406745a0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x406ff3a8"/></to>
    </wire>
    <wire loc="103:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40c64838"/></to>
    </wire>
    <wire loc="103:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40c33200"/></to>
    </wire>
    <wire loc="103:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40bf0200"/></to>
    </wire>
    <wire loc="46:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40939010"/></to>
    </wire>
    <wire loc="72:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x4082b9f8"/></to>
    </wire>
    <wire loc="73:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x408414c0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x407e7060"/></to>
    </wire>
    <wire loc="59:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x406ff010"/></to>
    </wire>
    <wire loc="44:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x4065cc80"/></to>
    </wire>
    <wire loc="57:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
      <from><interface-ref name="turnOff" scoped="" ref="0x4066aeb8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
      <from><interface-ref name="turnOn" scoped="" ref="0x4066d7c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="44:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaPinChange0C.nc">
      <from><interface-ref name="GpioInterrupt" scoped="" ref="0x4066f3d0"/></from>
      <to><interface-ref name="GpioInterrupt" scoped="" ref="0x40682e70"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaPinChange0C.nc">
      <from><interface-ref name="HplAtmegaPinChange" scoped="" ref="0x406823a0"/></from>
      <to><interface-ref name="HplAtmegaPinChange" scoped="" ref="0x4067b7a0"/></to>
    </wire>
    <wire loc="67:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x406ff3a8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40714630"/></to>
    </wire>
    <wire loc="63:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x4069e1b0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x406bf180"/></to>
    </wire>
    <wire loc="65:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x406b64d8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x406cf850"/></to>
    </wire>
    <wire loc="64:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x406bc5a8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x406bf8c0"/></to>
    </wire>
    <wire loc="67:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x406d0640"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x406cfee8"/></to>
    </wire>
    <wire loc="66:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x406c33b8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x406bfbe8"/></to>
    </wire>
    <wire loc="69:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x406ff010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40714298"/></to>
    </wire>
    <wire loc="60:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40710e80"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x406d0b78"/></to>
    </wire>
    <wire loc="69:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x40704430"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x406fe288"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x40704ae8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x406ffc68"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x40710978"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x40879e58"/></to>
    </wire>
    <wire loc="64:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x406fe288"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x4079bbc8"/></to>
    </wire>
    <wire loc="65:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x406ffc68"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x4079b808"/></to>
    </wire>
    <wire loc="66:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x407c23f8"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x40710978"/></to>
    </wire>
    <wire loc="70:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x4071fcf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40710e80"/></to>
    </wire>
    <wire loc="71:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x407d93f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40710e80"/></to>
    </wire>
    <wire loc="72:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x407e3978"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40710e80"/></to>
    </wire>
    <wire loc="74:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x407c28e0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x407222a8"/></to>
    </wire>
    <wire loc="75:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x407c2db8"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x40726ef8"/></to>
    </wire>
    <wire loc="77:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x4071f468"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x407d6ca0"/></to>
    </wire>
    <wire loc="78:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x40733d38"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x407d5d98"/></to>
    </wire>
    <wire loc="48:/opt/tinyos/tos/platforms/ucmini/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x407d5d98"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x407eaaf8"/></to>
    </wire>
    <wire loc="80:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x407e30f0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x407f02b8"/></to>
    </wire>
    <wire loc="49:/opt/tinyos/tos/platforms/ucmini/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x407f02b8"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x407eb490"/></to>
    </wire>
    <wire loc="332:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x4075dce8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x40739168"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x4075f578"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x4075b998"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x407d83d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x407d8808"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/platforms/ucmini/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x407ea0f0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x407eb010"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x407eb010"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x407e77b0"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x407eb490"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x407e7bc8"/></to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x407eaaf8"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x407e7398"/></to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/platforms/ucmini/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x407ebf08"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40881170"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40881170"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x4087e7f0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40827a70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x407ebf08"/></to>
    </wire>
    <wire loc="56:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x40800510"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x4082e640"/></to>
    </wire>
    <wire loc="60:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x4082e640"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x4082be48"/></to>
    </wire>
    <wire loc="57:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x40800948"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x4082eb50"/></to>
    </wire>
    <wire loc="61:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x4082eb50"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x408283a8"/></to>
    </wire>
    <wire loc="58:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x40800d80"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x4082d088"/></to>
    </wire>
    <wire loc="62:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x4082d088"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x408288c0"/></to>
    </wire>
    <wire loc="66:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x4082c760"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x40840390"/></to>
    </wire>
    <wire loc="64:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x4082dc98"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x40841910"/></to>
    </wire>
    <wire loc="65:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x4082c268"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x40841e40"/></to>
    </wire>
    <wire loc="68:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x4083f3e0"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x40635010"/></to>
    </wire>
    <wire loc="69:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x4083fb20"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x4040c1a8"/></to>
    </wire>
    <wire loc="75:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x4083fb20"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x4040c1a8"/></to>
    </wire>
    <wire loc="72:/opt/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x408702a0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x4086f338"/></to>
    </wire>
    <wire loc="67:/opt/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x4086f6d0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x4032fb58"/></to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x4032fb58"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x403f9738"/></to>
    </wire>
    <wire loc="48:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4086fc98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40c1ebf0"/></to>
    </wire>
    <wire loc="68:/opt/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4086fc98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40638bf8"/></to>
    </wire>
    <wire loc="71:/opt/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4086e0e0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></to>
    </wire>
    <wire loc="54:/opt/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403f8010"/></to>
    </wire>
    <wire loc="55:/opt/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x403f8c68"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x40332498"/></to>
    </wire>
    <wire loc="55:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x4087dae8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x4087a888"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMcu32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4087a888"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40892dd8"/></to>
    </wire>
    <wire loc="46:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMcu32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x4088f078"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x4088b128"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4088b128"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x408886f8"/></to>
    </wire>
    <wire loc="56:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <from><interface-ref name="AtmegaCounter" scoped="" ref="0x40887898"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x4089faf0"/></to>
    </wire>
    <wire loc="49:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4089faf0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40894d18"/></to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x408973f8"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x408a2910"/></to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40899010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x408abe10"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40899010"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x408a71a0"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40899010"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x408a5598"/></to>
    </wire>
    <wire loc="56:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x408bbd60"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x4040c1a8"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/platforms/ucmini/SerialResetC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40915e68"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405b64a0"/></to>
    </wire>
    <wire loc="46:/opt/tinyos/tos/platforms/ucmini/SerialResetC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40915440"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x406fe288"/>
      <arguments>
        <value cst="I:114">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="47:/opt/tinyos/tos/platforms/ucmini/SerialResetC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40915b20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x406ffc68"/>
      <arguments>
        <value cst="I:114">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="48:/opt/tinyos/tos/platforms/ucmini/SerialResetC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x40710978"/>
      <arguments>
        <value cst="I:114">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x4064aea8"/></to>
    </wire>
    <wire loc="54:/opt/tinyos/tos/platforms/ucmini/SerialResetP.nc">
      <from><interface-ref name="sendAck" scoped="" ref="0x40913608"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="43:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HumidityC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40bd4958"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40c9cbc8"/></to>
    </wire>
    <wire loc="43:/opt/tinyos/tos/platforms/ucmini/chips/sht21/TemperatureC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40bd6428"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40bd23e0"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/chips/sht21/Sht21RawTemperatureC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40bd23e0"/></from>
      <to><interface-ref name="ReadTemperature" scoped="" ref="0x40916620"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <from><interface-ref name="ReadHumidity" scoped="" ref="0x40932680"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40ac1068"/></to>
    </wire>
    <wire loc="49:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <from><interface-ref name="ReadTemperature" scoped="" ref="0x40916620"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40aaee78"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40a6f7d8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40aacef0"/></to>
    </wire>
    <wire loc="105:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40aacef0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40c5c6e8"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <from><interface-ref name="Service" scoped="" ref="0x40968ba0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40aa8010"/></to>
    </wire>
    <wire loc="54:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <from><interface-ref name="ActualRead" scoped="" ref="0x40aa8c68"/></from>
      <to><interface-ref name="Temperature" scoped="" ref="0x409317b8"/></to>
    </wire>
    <wire loc="42:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <from><interface-ref name="Temperature" scoped="" ref="0x409317b8"/></from>
      <to><interface-ref name="Temperature" scoped="" ref="0x4092d608"/></to>
    </wire>
    <wire loc="63:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40ac09a8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40abe088"/></to>
    </wire>
    <wire loc="105:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40abe088"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40c62ce8"/></to>
    </wire>
    <wire loc="64:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <from><interface-ref name="Service" scoped="" ref="0x40ac1d68"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40abbc38"/></to>
    </wire>
    <wire loc="66:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <from><interface-ref name="ActualRead" scoped="" ref="0x40aba8a8"/></from>
      <to><interface-ref name="Humidity" scoped="" ref="0x4092e4d0"/></to>
    </wire>
    <wire loc="43:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <from><interface-ref name="Humidity" scoped="" ref="0x4092e4d0"/></from>
      <to><interface-ref name="Humidity" scoped="" ref="0x40929330"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40926e28"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4096d5a8"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4096d5a8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40443f28"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <from><interface-ref name="I2CPacket" scoped="" ref="0x4093ee18"/></from>
      <to><interface-ref name="I2CPacket" scoped="" ref="0x4096aaa8"/></to>
    </wire>
    <wire loc="44:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HplSht21C.nc">
      <from><interface-ref name="I2CPacket" scoped="" ref="0x4096aaa8"/></from>
      <to><interface-ref name="I2CPacket" scoped="" ref="0x40963e60"/></to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <from><interface-ref name="I2CResource" scoped="" ref="0x40935230"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x409659d8"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HplSht21C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x409659d8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40963718"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <from><interface-ref name="BusPowerManager" scoped="" ref="0x40951868"/></from>
      <to><interface-ref name="BusPowerManager" scoped="" ref="0x40964208"/></to>
    </wire>
    <wire loc="46:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HplSht21C.nc">
      <from><interface-ref name="BusPowerManager" scoped="" ref="0x40964208"/></from>
      <to><interface-ref name="BusPowerManager" scoped="" ref="0x40a71698"/></to>
    </wire>
    <wire loc="153:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <from><interface-ref name="signalReadDone" scoped="" ref="0x4095feb8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <from><interface-ref name="startTimer" scoped="" ref="0x409583b0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/platforms/ucmini/I2CBusPowerManagerC.nc">
      <from><interface-ref name="BusPowerManager" scoped="" ref="0x40a71698"/></from>
      <to><interface-ref name="BusPowerManager" scoped="" ref="0x40a6de00"/></to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40963718"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x4097b8d8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterC.nc">
      <from><interface-ref name="I2CPacket" scoped="" ref="0x40963e60"/></from>
      <to><interface-ref name="I2CPacket" scoped="" ref="0x40977460"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x4097b8d8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x409df7d0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="I2CPacket" scoped="" ref="0x40977460"/></from>
      <to><interface-ref name="I2CPacket" scoped="" ref="0x409e1010"/></to>
    </wire>
    <wire loc="63:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="SubResource" scoped="" ref="0x40a01010"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40973ce8"/></to>
    </wire>
    <wire loc="105:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40973ce8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40bef6e8"/></to>
    </wire>
    <wire loc="64:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x40a01788"/></from>
      <to><interface-ref name="I2CPacket" scoped="" ref="0x40a272e0"/></to>
    </wire>
    <wire loc="65:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="Atm128I2C" scoped="" ref="0x409fe640"/></from>
      <to><interface-ref name="Atm128I2C" scoped="" ref="0x40a25240"/></to>
    </wire>
    <wire loc="67:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x409c9610"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x409fbd80"/></to>
    </wire>
    <wire loc="68:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x409c9d20"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40972890"/></to>
    </wire>
    <wire loc="107:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40972890"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40bee270"/></to>
    </wire>
    <wire loc="70:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="I2C" scoped="" ref="0x40a25598"/></from>
      <to><interface-ref name="I2C" scoped="" ref="0x40a42538"/></to>
    </wire>
    <wire loc="49:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusC.nc">
      <from><interface-ref name="I2C" scoped="" ref="0x40a42538"/></from>
      <to><interface-ref name="I2C" scoped="" ref="0x40a3e5d8"/></to>
    </wire>
    <wire loc="71:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="ReadDebugLeds" scoped="" ref="0x40a46c90"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40a5d378"/></to>
    </wire>
    <wire loc="72:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <from><interface-ref name="WriteDebugLeds" scoped="" ref="0x40a45c90"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40a5d378"/></to>
    </wire>
    <wire loc="106:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40972488"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x40befe28"/></to>
    </wire>
    <wire loc="108:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40972f28"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40bee908"/></to>
    </wire>
    <wire loc="109:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40beedc8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x409cc3e8"/></to>
    </wire>
    <wire loc="111:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x40bec250"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x40bf0538"/></to>
    </wire>
    <wire loc="75:/opt/tinyos/tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x40beb758"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusC.nc">
      <from><interface-ref name="I2CClk" scoped="" ref="0x40a3a140"/></from>
      <to><interface-ref name="PortD0" scoped="" ref="0x405e50a0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusC.nc">
      <from><interface-ref name="I2CData" scoped="" ref="0x40a3ab40"/></from>
      <to><interface-ref name="PortD1" scoped="" ref="0x405e5b98"/></to>
    </wire>
    <wire loc="53:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x40a39558"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x4040c1a8"/></to>
    </wire>
    <wire loc="45:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc">
      <from><interface-ref name="BusPowerManager" scoped="" ref="0x40a6de00"/></from>
      <to><interface-ref name="BusPowerManager" scoped="" ref="0x40c23958"/></to>
    </wire>
    <wire loc="43:/opt/tinyos/tos/platforms/ucmini/I2CBusPowerManagerC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x40a6c4f0"/></from>
      <to><interface-ref name="PortF1" scoped="" ref="0x405ecea8"/></to>
    </wire>
    <wire loc="46:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x40c1e298"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x40a6c4f0"/></to>
    </wire>
    <wire loc="47:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40c210c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40c47d60"/></to>
    </wire>
    <wire loc="52:/opt/tinyos/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40c47d60"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40443f28"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40aab648"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x40c5ce28"/></to>
    </wire>
    <wire loc="107:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40aaba50"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c5b270"/></to>
    </wire>
    <wire loc="108:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40aaa150"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40c5b908"/></to>
    </wire>
    <wire loc="109:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40c5bdc8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40aaa600"/></to>
    </wire>
    <wire loc="111:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x40c59250"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x40c33538"/></to>
    </wire>
    <wire loc="75:/opt/tinyos/tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x40c58758"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40abe7c8"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x40c61488"/></to>
    </wire>
    <wire loc="107:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40abebd0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c61890"/></to>
    </wire>
    <wire loc="108:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40abc310"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40c61f28"/></to>
    </wire>
    <wire loc="109:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40c603f8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40abc7c0"/></to>
    </wire>
    <wire loc="111:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x40c60820"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x40c64b70"/></to>
    </wire>
    <wire loc="75:/opt/tinyos/tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x40c5ed70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="44:/opt/tinyos/tos/chips/sht21/Sht21RawHumidityC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40c9cbc8"/></from>
      <to><interface-ref name="ReadHumidity" scoped="" ref="0x40932680"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="TH20SensorP" loc="3:TH20SensorP.nc" safe="">
      <module/>
    </component>
    <component qname="TH20SensorC.TimerMilliC" loc="44(TH20SensorC.TimerMilliC):/opt/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <configuration/>
    </component>
    <component qname="TimerMilliP.AlarmMilli32C" loc="37(TimerMilliP.AlarmMilli32C):/opt/tinyos/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C" loc="37(TimerMilliP.AlarmMilli32C.Alarm62khz32C):/opt/tinyos/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <instance number="0">
        <component-ref qname="Alarm62khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP" loc="35(TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP):/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <instance number="0">
        <component-ref qname="AtmegaCompareP"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="McuInitC" loc="35:/opt/tinyos/tos/chips/atm128rfa1/McuInitC.nc" safe="">
      <configuration/>
    </component>
    <component qname="McuInitP" loc="36:/opt/tinyos/tos/chips/atm128rfa1/McuInitP.nc" safe="">
      <module/>
    </component>
    <component qname="MeasureClockC" loc="55:/opt/tinyos/tos/chips/atm128rfa1/timer/MeasureClockC.nc">
      <documentation loc="46:/opt/tinyos/tos/chips/atm128rfa1/timer/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RFA1RadioOffP" loc="34:/opt/tinyos/tos/chips/atm128rfa1/radio/RFA1RadioOffP.nc">
      <module/>
    </component>
    <component qname="HplAtmRfa1TimerMacC" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <configuration/>
    </component>
    <component qname="HplAtmRfa1TimerMacP" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="40:/opt/tinyos/tos/chips/atm128rfa1/McuSleepC.nc" safe="">
      <documentation loc="34:/opt/tinyos/tos/chips/atm128rfa1/McuSleepC.nc">
        <short>&#10; </short>
        <long>&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Counter62khz32C" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <configuration/>
    </component>
    <component qname="Counter62khz32C.AtmegaCounterP" loc="35(Counter62khz32C.AtmegaCounterP):/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <instance number="0">
        <component-ref qname="AtmegaCounterP"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <value cst="I:48">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMilli32C.nc">
      <configuration/>
    </component>
    <component qname="CounterMilli32C.TransformCounterC" loc="54(CounterMilli32C.TransformCounterC):/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP.AlarmMilli32C.TransformAlarmC" loc="51(TimerMilliP.AlarmMilli32C.TransformAlarmC):/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP.AlarmToTimerC" loc="46(TimerMilliP.AlarmToTimerC):/opt/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/opt/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP.VirtualizeTimerC" loc="46(TimerMilliP.VirtualizeTimerC):/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="41:/opt/tinyos/tos/platforms/ucmini/LedsC.nc">
      <documentation loc="35:/opt/tinyos/tos/platforms/ucmini/LedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Jan Beutel&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:/opt/tinyos/tos/platforms/ucmini/LedsP.nc" safe="">
      <documentation loc="35:/opt/tinyos/tos/platforms/ucmini/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="35:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <configuration/>
    </component>
    <component qname="AtmegaGeneralIOC" loc="35:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <configuration/>
    </component>
    <component qname="AtmegaGeneralIOC.PortA" loc="36(AtmegaGeneralIOC.PortA):/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="0">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortB" loc="36(AtmegaGeneralIOC.PortB):/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="1">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortC" loc="36(AtmegaGeneralIOC.PortC):/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="2">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortD" loc="36(AtmegaGeneralIOC.PortD):/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="3">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortE" loc="36(AtmegaGeneralIOC.PortE):/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="4">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortF" loc="36(AtmegaGeneralIOC.PortF):/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="5">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortG" loc="36(AtmegaGeneralIOC.PortG):/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="6">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformC" loc="35:/opt/tinyos/tos/platforms/ucmini/PlatformC.nc">
      <configuration/>
    </component>
    <component qname="PlatformP" loc="37:/opt/tinyos/tos/platforms/ucmini/PlatformP.nc" safe="">
      <documentation loc="1:/opt/tinyos/tos/platforms/ucmini/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Stm25pOffC" loc="35:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/Stm25pOffC.nc">
      <configuration/>
    </component>
    <component qname="Stm25pOffP" loc="35:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/Stm25pOffP.nc">
      <module/>
    </component>
    <component qname="HplStm25pPinsC" loc="40:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <documentation loc="32:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for a ST M25P chip&#10; connected to a TI MSP430.</short>
        <long>&#10; HPL implementation of general-purpose I/O for a ST M25P chip&#10; connected to a TI MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2010-11-18 23:16:35 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplStm25pPinsC.NoPinC" loc="16(HplStm25pPinsC.NoPinC):/opt/tinyos/tos/system/NoPinC.nc">
      <documentation loc="10:/opt/tinyos/tos/system/NoPinC.nc">
        <short>&#10; Dummy pin component.</short>
        <long>&#10; Dummy pin component.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="NoPinC"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialAutoControlP" loc="33:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
      <documentation loc="1:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
        <short> Copyright (c) 2011, University of Szeged&#10; All rights reserved.</short>
        <long> Copyright (c) 2011, University of Szeged&#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10; notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above&#10; copyright notice, this list of conditions and the following&#10; disclaimer in the documentation and/or other materials provided&#10; with the distribution.&#10; - Neither the name of University of Szeged nor the names of its&#10; contributors may be used to endorse or promote products derived&#10; from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE&#10; COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,&#10; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; Author: Andras Biro&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplSerialAutoControlC" loc="34:/opt/tinyos/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <documentation loc="1:/opt/tinyos/tos/platforms/ucmini/HplSerialAutoControlC.nc">
        <short> Copyright (c) 2011, University of Szeged&#10; All rights reserved.</short>
        <long> Copyright (c) 2011, University of Szeged&#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10; notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above&#10; copyright notice, this list of conditions and the following&#10; disclaimer in the documentation and/or other materials provided&#10; with the distribution.&#10; - Neither the name of University of Szeged nor the names of its&#10; contributors may be used to endorse or promote products derived&#10; from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE&#10; COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,&#10; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; Author: Andras Biro&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AtmegaPinChange0C" loc="35:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaPinChange0C.nc">
      <configuration/>
    </component>
    <component qname="HplAtmegaPinChange0C" loc="38:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange0C.nc">
      <module/>
    </component>
    <component qname="AtmegaPinChange0C.AtmegaPinChangeP" loc="50(AtmegaPinChange0C.AtmegaPinChangeP):/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaPinChangeP.nc">
      <instance number="0">
        <component-ref qname="AtmegaPinChangeP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:/opt/tinyos/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):/opt/tinyos/tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:/opt/tinyos/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:/opt/tinyos/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:/opt/tinyos/tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:/opt/tinyos/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:/opt/tinyos/tos/platforms/ucmini/PlatformSerialC.nc">
      <documentation loc="32:/opt/tinyos/tos/platforms/ucmini/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2010-10-26 09:27:59 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <documentation loc="38:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <documentation loc="102:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MainC" loc="56:/opt/tinyos/tos/system/MainC.nc">
      <documentation loc="1:/opt/tinyos/tos/platforms/ucmini/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RealMainP" loc="56:/opt/tinyos/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/opt/tinyos/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/opt/tinyos/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/opt/tinyos/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/opt/tinyos/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMicro32C.nc">
      <configuration/>
    </component>
    <component qname="CounterMicro32C.TransformCounterC" loc="54(CounterMicro32C.TransformCounterC):/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40421b60"/>
            <typename><typedef-ref name="TMicro" ref="0x40421d28"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMcu32C" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMcu32C.nc">
      <configuration/>
    </component>
    <component qname="CounterMcu32C.TransformCounterC" loc="54(CounterMcu32C.TransformCounterC):/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMcu16C" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <configuration/>
    </component>
    <component qname="CounterMcu16C.AtmegaCounterP" loc="35(CounterMcu16C.AtmegaCounterP):/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <instance number="1">
        <component-ref qname="AtmegaCounterP"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtmRfa1Timer1C" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <configuration/>
    </component>
    <component qname="HplAtmRfa1Timer1P" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc" safe="">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:/opt/tinyos/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:/opt/tinyos/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialResetP" loc="34:/opt/tinyos/tos/platforms/ucmini/SerialResetP.nc">
      <documentation loc="1:/opt/tinyos/tos/platforms/ucmini/SerialResetP.nc">
        <short> Copyright (c) 2010, University of Szeged&#10; All rights reserved.</short>
        <long> Copyright (c) 2010, University of Szeged&#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10; notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above&#10; copyright notice, this list of conditions and the following&#10; disclaimer in the documentation and/or other materials provided&#10; with the distribution.&#10; - Neither the name of University of Szeged nor the names of its&#10; contributors may be used to endorse or promote products derived&#10; from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE&#10; COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,&#10; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; Author: Miklos Maroti&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TH20SensorC.Sht7" loc="4(TH20SensorC.Sht7):/opt/tinyos/tos/platforms/ucmini/chips/sht21/SensirionSht11C.nc">
      <instance number="0">
        <component-ref qname="SensirionSht11C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TH20SensorC.Sht7.TemperatureC" loc="35(TH20SensorC.Sht7.TemperatureC):/opt/tinyos/tos/platforms/ucmini/chips/sht21/TemperatureC.nc">
      <instance number="0">
        <component-ref qname="TemperatureC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TH20SensorC.Sht7.TemperatureC.Sht21RawTemperatureC" loc="37(TH20SensorC.Sht7.TemperatureC.Sht21RawTemperatureC):/opt/tinyos/tos/chips/sht21/Sht21RawTemperatureC.nc">
      <instance number="0">
        <component-ref qname="Sht21RawTemperatureC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Sht21ArbitratedC" loc="36:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <configuration/>
    </component>
    <component qname="Sht21C" loc="35:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <configuration/>
    </component>
    <component qname="Sht21P" loc="36:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <module/>
    </component>
    <component qname="Sht21C.TimerMilliC" loc="44(Sht21C.TimerMilliC):/opt/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplSht21C" loc="35:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HplSht21C.nc">
      <configuration/>
    </component>
    <component qname="HplSht21C.I2CBus" loc="43(HplSht21C.I2CBus):/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterC.nc">
      <documentation loc="32:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterC.nc">
        <short>&#10; The basic client abstraction of the I2C on the Atmega128.</short>
        <long>&#10; The basic client abstraction of the I2C on the Atmega128. I2C&#10; device drivers should instantiate one of these to ensure&#10; exclusive access to the I2C bus.&#10;&#10; @author Philip Levis&#10; @date   May 28, 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128I2CMasterC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128I2CMasterP" loc="44:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <documentation loc="32:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
        <short>&#10; The configuration that takes the underlying I2C driver on the &#10; Atmega128 and turns it into a shared abstraction.</short>
        <long>&#10; The configuration that takes the underlying I2C driver on the &#10; Atmega128 and turns it into a shared abstraction.&#10;&#10; @date May 28 2006&#10; @author Philip Levis&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128I2CMasterP.Arbiter" loc="89(Atm128I2CMasterP.Arbiter):/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <documentation loc="69:/opt/tinyos/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128I2CMasterC.I2CPacket">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128I2CMasterP.Arbiter.Queue" loc="42(Atm128I2CMasterP.Arbiter.Queue):/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128I2CMasterP.Arbiter.Arbiter" loc="52(Atm128I2CMasterP.Arbiter.Arbiter):/opt/tinyos/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128I2CMasterP.Power" loc="58(Atm128I2CMasterP.Power):/opt/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:/opt/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="Atm128I2CMasterP.I2C" loc="40(Atm128I2CMasterP.I2C):/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc">
      <documentation loc="32:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc">
        <short>&#10; The configuration that takes the underlying I2C driver on the &#10; Atmega128 and turns it into a shared abstraction.</short>
        <long>&#10; The configuration that takes the underlying I2C driver on the &#10; Atmega128 and turns it into a shared abstraction.&#10;&#10; @date May 28 2006&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128I2CMasterImplP"/>
      </instance>
      <module/>
    </component>
    <component qname="Atm128I2CMasterP.Master" loc="76(Atm128I2CMasterP.Master):/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc">
      <documentation loc="61:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc">
        <short>&#10; This driver implements an interupt driven I2C Master controller &#10; Hardware Abstraction Layer (HAL) to the ATmega128 &#10; two-wire-interface (TWI) hardware subsystem.</short>
        <long>&#10; This driver implements an interupt driven I2C Master controller &#10; Hardware Abstraction Layer (HAL) to the ATmega128 &#10; two-wire-interface (TWI) hardware subsystem.&#10;&#10; @author Philip Levis&#10; @author Philipp Sommer, ETH Zurich, sommer@tik.ee.ethz.ch&#10; @author Roland Flury, ETH Zurich, rflury@tik.ee.ethz.ch&#10; @author Thomas Fahrni, ETH Zurich, tfahrni@ee.ethz.ch&#10; @author Richard Huber, ETH Zurich, rihuber@ee.ethz.ch&#10; @author Lars Schor, ETH Zurich, lschor@ee.ethz.ch&#10; @author Andras Biro, University of Szeged&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128I2CMasterPacketP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128I2CBusC" loc="42:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusC.nc">
      <documentation loc="33:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusC.nc">
        <short>&#10; This driver implements direct I2C register access and a blocking master&#10; controller for the ATmega128 via a Hardware Platform Layer (HPL) to its  &#10; two-wire-interface (TWI) hardware subsystem.</short>
        <long>&#10; This driver implements direct I2C register access and a blocking master&#10; controller for the ATmega128 via a Hardware Platform Layer (HPL) to its  &#10; two-wire-interface (TWI) hardware subsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Philip Levis&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128I2CBusP" loc="55:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusP.nc">
      <documentation loc="47:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusP.nc">
        <short>&#10; This driver implements direct I2C register access and a blocking master&#10; controller for the ATmega128 via a Hardware Platform Layer (HPL) to its  &#10; two-wire-interface (TWI) hardware subsystem.</short>
        <long>&#10; This driver implements direct I2C register access and a blocking master&#10; controller for the ATmega128 via a Hardware Platform Layer (HPL) to its  &#10; two-wire-interface (TWI) hardware subsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Philip Levis&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="NoLedsC" loc="45:/opt/tinyos/tos/platforms/ucmini/NoLedsC.nc">
      <documentation loc="35:/opt/tinyos/tos/platforms/ucmini/NoLedsC.nc">
        <short>&#10; A null operation replacement for the LedsC component.</short>
        <long>&#10; A null operation replacement for the LedsC component. As many&#10; components might concurrently signal information through LEDs,&#10; using LedsC and NoLedsC allows an application builder to select&#10; which components control the LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 19, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="I2CBusPowerManagerC" loc="35:/opt/tinyos/tos/platforms/ucmini/I2CBusPowerManagerC.nc">
      <configuration/>
    </component>
    <component qname="I2CBusPowerManagerC.BusPowerManagerC" loc="35(I2CBusPowerManagerC.BusPowerManagerC):/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc">
      <instance number="0">
        <component-ref qname="BusPowerManagerC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="I2CBusPowerManagerC.BusPowerManagerC.BusPowerManagerP" loc="35(I2CBusPowerManagerC.BusPowerManagerC.BusPowerManagerP):/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerP.nc">
      <instance number="0">
        <component-ref qname="BusPowerManagerP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="I2CBusPowerManagerC.BusPowerManagerC.TimerMilliC" loc="44(I2CBusPowerManagerC.BusPowerManagerC.TimerMilliC):/opt/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Sht21ArbitratedC.ArbitratedTemp" loc="23(Sht21ArbitratedC.ArbitratedTemp):/opt/tinyos/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/opt/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Sht21ArbitratedC.TempArbiter" loc="89(Sht21ArbitratedC.TempArbiter):/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <documentation loc="69:/opt/tinyos/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Sht21Temperature.ReadResource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Sht21ArbitratedC.TempArbiter.Queue" loc="42(Sht21ArbitratedC.TempArbiter.Queue):/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Sht21ArbitratedC.TempArbiter.Arbiter" loc="52(Sht21ArbitratedC.TempArbiter.Arbiter):/opt/tinyos/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Sht21ArbitratedC.TempClient" loc="35(Sht21ArbitratedC.TempClient):/opt/tinyos/tos/system/ReadClientP.nc">
      <instance number="0">
        <component-ref qname="ReadClientP"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Sht21ArbitratedC.ArbitratedHumi" loc="23(Sht21ArbitratedC.ArbitratedHumi):/opt/tinyos/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/opt/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Sht21ArbitratedC.HumiArbiter" loc="89(Sht21ArbitratedC.HumiArbiter):/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <documentation loc="69:/opt/tinyos/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Sht21Humidity.ReadResource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Sht21ArbitratedC.HumiArbiter.Queue" loc="42(Sht21ArbitratedC.HumiArbiter.Queue):/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
      <instance number="2">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Sht21ArbitratedC.HumiArbiter.Arbiter" loc="52(Sht21ArbitratedC.HumiArbiter.Arbiter):/opt/tinyos/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Sht21ArbitratedC.HumiClient" loc="35(Sht21ArbitratedC.HumiClient):/opt/tinyos/tos/system/ReadClientP.nc">
      <instance number="1">
        <component-ref qname="ReadClientP"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TH20SensorC.Sht7.HumidityC" loc="35(TH20SensorC.Sht7.HumidityC):/opt/tinyos/tos/platforms/ucmini/chips/sht21/HumidityC.nc">
      <instance number="0">
        <component-ref qname="HumidityC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TH20SensorC.Sht7.HumidityC.Sht21RawHumidityC" loc="36(TH20SensorC.Sht7.HumidityC.Sht21RawHumidityC):/opt/tinyos/tos/chips/sht21/Sht21RawHumidityC.nc">
      <instance number="0">
        <component-ref qname="Sht21RawHumidityC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliC" loc="44:/opt/tinyos/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/opt/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm62khz32C" loc="37:/opt/tinyos/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AtmegaCompareP" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc" abstract="">
      <parameters>
        <typedef name="precision_tag" ref="0x4045ae40" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
          <component-ref qname="AtmegaCompareP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4045ae40"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x404562c0" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
          <component-ref qname="AtmegaCompareP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x404562c0"/></type-var>
        </typedef>
        <constant name="mode" ref="0x404564b0" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
          <component-ref qname="AtmegaCompareP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </constant>
        <constant name="mindt" ref="0x404566b8" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
          <component-ref qname="AtmegaCompareP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AtmegaCounterP" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc" abstract="">
      <parameters>
        <typedef name="precision_tag" ref="0x40514e70" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
          <component-ref qname="AtmegaCounterP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40514e70"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4051d2c0" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
          <component-ref qname="AtmegaCounterP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4051d2c0"/></type-var>
        </typedef>
        <constant name="mode" ref="0x4051d4b0" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
          <component-ref qname="AtmegaCounterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:/opt/tinyos/tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x40532df8" loc="55:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x40532df8"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x4052f278" loc="56:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x4052f278"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x4052f4e0" loc="57:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x4052f4e0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x4052f950" loc="58:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x4052f950"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x4052fbb8" loc="59:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x4052e058" loc="60:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x4052e058"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x40527c90" loc="52:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x40527c90"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x40546108" loc="53:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x40546108"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x40546370" loc="54:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x40546370"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x405467e0" loc="55:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x405467e0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x40546a48" loc="56:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/opt/tinyos/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/opt/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x405628a8" loc="46:/opt/tinyos/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x405628a8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40583290" loc="46:/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40583290"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x40583470" loc="46:/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOP" loc="36:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc" abstract="" safe="">
      <parameters>
        <constant name="port_addr" ref="0x405f48a8" loc="36:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
          <component-ref qname="AtmegaGeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x405f4ad0" loc="37:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
          <component-ref qname="AtmegaGeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x405f4cf8" loc="38:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
          <component-ref qname="AtmegaGeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="NoPinC" loc="16:/opt/tinyos/tos/system/NoPinC.nc" abstract="">
      <documentation loc="10:/opt/tinyos/tos/system/NoPinC.nc">
        <short>&#10; Dummy pin component.</short>
        <long>&#10; Dummy pin component.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AtmegaPinChangeP" loc="50:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaPinChangeP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:/opt/tinyos/tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:/opt/tinyos/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:/opt/tinyos/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SensirionSht11C" loc="4:/opt/tinyos/tos/platforms/ucmini/chips/sht21/SensirionSht11C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TemperatureC" loc="35:/opt/tinyos/tos/platforms/ucmini/chips/sht21/TemperatureC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Sht21RawTemperatureC" loc="37:/opt/tinyos/tos/chips/sht21/Sht21RawTemperatureC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128I2CMasterC" loc="43:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterC.nc" abstract="">
      <documentation loc="32:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterC.nc">
        <short>&#10; The basic client abstraction of the I2C on the Atmega128.</short>
        <long>&#10; The basic client abstraction of the I2C on the Atmega128. I2C&#10; device drivers should instantiate one of these to ensure&#10; exclusive access to the I2C bus.&#10;&#10; @author Philip Levis&#10; @date   May 28, 2006&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsArbiterC" loc="89:/opt/tinyos/tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:/opt/tinyos/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x40974748" loc="89:/opt/tinyos/tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:/opt/tinyos/tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x4098ebc0" loc="42:/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/opt/tinyos/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/opt/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x409867c8" loc="52:/opt/tinyos/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:/opt/tinyos/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:/opt/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128I2CMasterImplP" loc="40:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc" abstract="">
      <documentation loc="32:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc">
        <short>&#10; The configuration that takes the underlying I2C driver on the &#10; Atmega128 and turns it into a shared abstraction.</short>
        <long>&#10; The configuration that takes the underlying I2C driver on the &#10; Atmega128 and turns it into a shared abstraction.&#10;&#10; @date May 28 2006&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128I2CMasterPacketP" loc="76:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc" abstract="">
      <documentation loc="61:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc">
        <short>&#10; This driver implements an interupt driven I2C Master controller &#10; Hardware Abstraction Layer (HAL) to the ATmega128 &#10; two-wire-interface (TWI) hardware subsystem.</short>
        <long>&#10; This driver implements an interupt driven I2C Master controller &#10; Hardware Abstraction Layer (HAL) to the ATmega128 &#10; two-wire-interface (TWI) hardware subsystem.&#10;&#10; @author Philip Levis&#10; @author Philipp Sommer, ETH Zurich, sommer@tik.ee.ethz.ch&#10; @author Roland Flury, ETH Zurich, rflury@tik.ee.ethz.ch&#10; @author Thomas Fahrni, ETH Zurich, tfahrni@ee.ethz.ch&#10; @author Richard Huber, ETH Zurich, rihuber@ee.ethz.ch&#10; @author Lars Schor, ETH Zurich, lschor@ee.ethz.ch&#10; @author Andras Biro, University of Szeged&#10;&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="BusPowerManagerC" loc="35:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc" abstract="">
      <parameters>
        <constant name="highIsOn" ref="0x40a6e688" loc="35:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc">
          <component-ref qname="BusPowerManagerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
        </constant>
        <constant name="initPin" ref="0x40a6e878" loc="35:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc">
          <component-ref qname="BusPowerManagerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="BusPowerManagerP" loc="35:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerP.nc" abstract="">
      <parameters>
        <constant name="highIsOn" ref="0x40a6a338" loc="35:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerP.nc">
          <component-ref qname="BusPowerManagerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
        </constant>
        <constant name="initPin" ref="0x40a6a528" loc="35:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerP.nc">
          <component-ref qname="BusPowerManagerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/opt/tinyos/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/opt/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x40a972b8" loc="23:/opt/tinyos/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x40a972b8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="ReadClientP" loc="35:/opt/tinyos/tos/system/ReadClientP.nc" abstract="">
      <parameters>
        <typedef name="type" ref="0x40aa9660" loc="35:/opt/tinyos/tos/system/ReadClientP.nc">
          <component-ref qname="ReadClientP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="type" scoped="" ref="0x40aa9660"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="HumidityC" loc="35:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HumidityC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Sht21RawHumidityC" loc="36:/opt/tinyos/tos/chips/sht21/Sht21RawHumidityC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Humidity" ref="0x4042a0b8" loc="10:TH20SensorP.nc">
      <component-ref qname="TH20SensorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Humidity" scoped="" ref="0x4042a0b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4042a6e0"/>
        <function-ref name="readDone" scoped="" ref="0x4042a938"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x4042cd98" loc="6:TH20SensorP.nc">
      <component-ref qname="TH20SensorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x4042cd98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4042b010"/>
        <function-ref name="led0Toggle" scoped="" ref="0x4042b0f0"/>
        <function-ref name="led1On" scoped="" ref="0x4042b1d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x4042b2b0"/>
        <function-ref name="led3Off" scoped="" ref="0x4042b390"/>
        <function-ref name="led2Toggle" scoped="" ref="0x4042b470"/>
        <function-ref name="get" scoped="" ref="0x4042b550"/>
        <function-ref name="led1Off" scoped="" ref="0x4042b630"/>
        <function-ref name="led3Toggle" scoped="" ref="0x4042b710"/>
        <function-ref name="led3On" scoped="" ref="0x4042b7f0"/>
        <function-ref name="led0On" scoped="" ref="0x4042b8d0"/>
        <function-ref name="led2Off" scoped="" ref="0x4042b9b0"/>
        <function-ref name="led2On" scoped="" ref="0x4042ba90"/>
        <function-ref name="set" scoped="" ref="0x4042bbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Temperature" ref="0x404313b0" loc="9:TH20SensorP.nc">
      <component-ref qname="TH20SensorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Temperature" scoped="" ref="0x404313b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x404319d8"/>
        <function-ref name="readDone" scoped="" ref="0x40431c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x4042dba8" loc="5:TH20SensorP.nc">
      <component-ref qname="TH20SensorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4042dba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4042c6a8"/>
        <function-ref name="fired" scoped="" ref="0x4041f948"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4042c068"/>
        <function-ref name="isOneShot" scoped="" ref="0x4041fdf8"/>
        <function-ref name="getdt" scoped="" ref="0x4042cb58"/>
        <function-ref name="gett0" scoped="" ref="0x4042c900"/>
        <function-ref name="isRunning" scoped="" ref="0x4041fba0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4041f1f0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4042c388"/>
        <function-ref name="startOneShot" scoped="" ref="0x4041f470"/>
        <function-ref name="stop" scoped="" ref="0x4041f6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40422770" loc="45:/opt/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="TH20SensorC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40422770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x405b7330"/>
        <function-ref name="fired" scoped="" ref="0x40437520"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40437c28"/>
        <function-ref name="isOneShot" scoped="" ref="0x404379d0"/>
        <function-ref name="getdt" scoped="" ref="0x405b77e0"/>
        <function-ref name="gett0" scoped="" ref="0x405b7588"/>
        <function-ref name="isRunning" scoped="" ref="0x40437778"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40422d98"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x405b7010"/>
        <function-ref name="startOneShot" scoped="" ref="0x40437048"/>
        <function-ref name="stop" scoped="" ref="0x404372c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x40443f28" loc="41:/opt/tinyos/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x40443f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40449a18"/>
        <function-ref name="fired" scoped="" ref="0x4044acb8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x404493d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x40449180"/>
        <function-ref name="getdt" scoped="" ref="0x40449ec8"/>
        <function-ref name="gett0" scoped="" ref="0x40449c70"/>
        <function-ref name="isRunning" scoped="" ref="0x4044af10"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4044a560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x404496f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x4044a7e0"/>
        <function-ref name="stop" scoped="" ref="0x4044aa60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40450470" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40450470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40563940"/>
        <function-ref name="fired" scoped="" ref="0x40563110"/>
        <function-ref name="startAt" scoped="" ref="0x40563600"/>
        <function-ref name="isRunning" scoped="" ref="0x40563388"/>
        <function-ref name="getAlarm" scoped="" ref="0x40563bb8"/>
        <function-ref name="start" scoped="" ref="0x40450bc0"/>
        <function-ref name="stop" scoped="" ref="0x40450e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40acfca8" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40acfca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40acc170"/>
        <function-ref name="fired" scoped="" ref="0x40acd928"/>
        <function-ref name="startAt" scoped="" ref="0x40acde18"/>
        <function-ref name="isRunning" scoped="" ref="0x40acdba0"/>
        <function-ref name="getAlarm" scoped="" ref="0x40acc3e8"/>
        <function-ref name="start" scoped="" ref="0x40acd410"/>
        <function-ref name="stop" scoped="" ref="0x40acd6b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCompare" ref="0x40ae37c8" loc="46:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCompare" scoped="" ref="0x40ae37c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x40ae0288"/>
        <function-ref name="test" scoped="" ref="0x40ae15c0"/>
        <function-ref name="fired" scoped="" ref="0x40ae1348"/>
        <function-ref name="force" scoped="" ref="0x40ae07a0"/>
        <function-ref name="get" scoped="" ref="0x40ae3e10"/>
        <function-ref name="reset" scoped="" ref="0x40ae1838"/>
        <function-ref name="getMode" scoped="" ref="0x40ae0528"/>
        <function-ref name="isOn" scoped="" ref="0x40ae0010"/>
        <function-ref name="set" scoped="" ref="0x40ae10a8"/>
        <function-ref name="start" scoped="" ref="0x40ae1ab0"/>
        <function-ref name="stop" scoped="" ref="0x40ae1d28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40ae7d38" loc="40:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40ae7d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40ae5208"/>
        <function-ref name="fired" scoped="" ref="0x40ae69b0"/>
        <function-ref name="startAt" scoped="" ref="0x40ae6ea0"/>
        <function-ref name="isRunning" scoped="" ref="0x40ae6c28"/>
        <function-ref name="getAlarm" scoped="" ref="0x40ae5480"/>
        <function-ref name="start" scoped="" ref="0x40ae6498"/>
        <function-ref name="stop" scoped="" ref="0x40ae6738"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40ae7900" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40ae7900"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403287d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403287d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40ae7ad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCounter" ref="0x40ae5750" loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCounter" scoped="" ref="0x40ae5750"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x40ae3288"/>
        <function-ref name="test" scoped="" ref="0x40ae4560"/>
        <function-ref name="get" scoped="" ref="0x40ae5d98"/>
        <function-ref name="reset" scoped="" ref="0x40ae47d8"/>
        <function-ref name="getMode" scoped="" ref="0x40ae3528"/>
        <function-ref name="overflow" scoped="" ref="0x40ae42e8"/>
        <function-ref name="isOn" scoped="" ref="0x40ae3010"/>
        <function-ref name="set" scoped="" ref="0x40ae4048"/>
        <function-ref name="start" scoped="" ref="0x40ae4a50"/>
        <function-ref name="stop" scoped="" ref="0x40ae4cc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x404825b8" loc="37:/opt/tinyos/tos/chips/atm128rfa1/McuInitC.nc">
      <component-ref qname="McuInitC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x404825b8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403287d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403287d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40482790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcInit" ref="0x40482d70" loc="42:/opt/tinyos/tos/chips/atm128rfa1/McuInitC.nc">
      <component-ref qname="McuInitC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AdcInit" scoped="" ref="0x40482d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40481010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerInit" ref="0x404829c0" loc="41:/opt/tinyos/tos/chips/atm128rfa1/McuInitC.nc">
      <component-ref qname="McuInitC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerInit" scoped="" ref="0x404829c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40482b98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioInit" ref="0x4048a7a8" loc="45:/opt/tinyos/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioInit" scoped="" ref="0x4048a7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4048a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40481820" loc="38:/opt/tinyos/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40481820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404819f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcInit" ref="0x4048a3e0" loc="44:/opt/tinyos/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AdcInit" scoped="" ref="0x4048a3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4048a5b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x40481c48" loc="42:/opt/tinyos/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x40481c48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40481e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerInit" ref="0x4048a030" loc="43:/opt/tinyos/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerInit" scoped="" ref="0x4048a030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4048a208"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40497118" loc="60:/opt/tinyos/tos/chips/atm128rfa1/timer/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40497118"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403287d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403287d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404972f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x404929c8" loc="61:/opt/tinyos/tos/chips/atm128rfa1/timer/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x404929c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40492ba0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x40492c80"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40492d60"/>
        <function-ref name="actualMicro" scoped="" ref="0x40492e40"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40492f20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RFA1RadioOff" ref="0x4048b240" loc="35:/opt/tinyos/tos/chips/atm128rfa1/radio/RFA1RadioOffP.nc">
      <component-ref qname="RFA1RadioOffP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RFA1RadioOff" scoped="" ref="0x4048b240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4048b418"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40484a58" loc="41:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <component-ref qname="HplAtmRfa1TimerMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40484a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x404a4500"/>
        <function-ref name="test" scoped="" ref="0x404a6848"/>
        <function-ref name="get" scoped="" ref="0x404a60b8"/>
        <function-ref name="reset" scoped="" ref="0x404a6ac0"/>
        <function-ref name="getMode" scoped="" ref="0x404a47a0"/>
        <function-ref name="overflow" scoped="" ref="0x404a65d0"/>
        <function-ref name="isOn" scoped="" ref="0x404a4288"/>
        <function-ref name="set" scoped="" ref="0x404a6330"/>
        <function-ref name="start" scoped="" ref="0x404a6d38"/>
        <function-ref name="stop" scoped="" ref="0x404a4010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SfdCapture" ref="0x404ab138" loc="43:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <component-ref qname="HplAtmRfa1TimerMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SfdCapture" scoped="" ref="0x404ab138"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCapture"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x404aab80"/>
        <function-ref name="test" scoped="" ref="0x404abf10"/>
        <function-ref name="fired" scoped="" ref="0x404abc98"/>
        <function-ref name="get" scoped="" ref="0x404ab780"/>
        <function-ref name="reset" scoped="" ref="0x404aa1a0"/>
        <function-ref name="getMode" scoped="" ref="0x404aae20"/>
        <function-ref name="isOn" scoped="" ref="0x404aa908"/>
        <function-ref name="set" scoped="" ref="0x404ab9f8"/>
        <function-ref name="start" scoped="" ref="0x404aa418"/>
        <function-ref name="stop" scoped="" ref="0x404aa690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x404a4e68" loc="42:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <component-ref qname="HplAtmRfa1TimerMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x404a4e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x404ae8d8"/>
        <function-ref name="test" scoped="" ref="0x404afc68"/>
        <function-ref name="fired" scoped="" ref="0x404af9f0"/>
        <function-ref name="force" scoped="" ref="0x404aedf0"/>
        <function-ref name="get" scoped="" ref="0x404af4d8"/>
        <function-ref name="reset" scoped="" ref="0x404afee0"/>
        <function-ref name="getMode" scoped="" ref="0x404aeb78"/>
        <function-ref name="isOn" scoped="" ref="0x404ae660"/>
        <function-ref name="set" scoped="" ref="0x404af750"/>
        <function-ref name="start" scoped="" ref="0x404ae170"/>
        <function-ref name="stop" scoped="" ref="0x404ae3e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x404b9b98" loc="42:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x404b9b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x404b6600"/>
        <function-ref name="test" scoped="" ref="0x404b8990"/>
        <function-ref name="fired" scoped="" ref="0x404b8718"/>
        <function-ref name="force" scoped="" ref="0x404b6b18"/>
        <function-ref name="get" scoped="" ref="0x404b8200"/>
        <function-ref name="reset" scoped="" ref="0x404b8c08"/>
        <function-ref name="getMode" scoped="" ref="0x404b68a0"/>
        <function-ref name="isOn" scoped="" ref="0x404b6388"/>
        <function-ref name="set" scoped="" ref="0x404b8478"/>
        <function-ref name="start" scoped="" ref="0x404b8e80"/>
        <function-ref name="stop" scoped="" ref="0x404b6110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x404c56f8" loc="46:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x404c56f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x404c58d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x404b6f10" loc="43:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x404b6f10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x404c09f0"/>
        <function-ref name="test" scoped="" ref="0x404c1d08"/>
        <function-ref name="fired" scoped="" ref="0x404c1a90"/>
        <function-ref name="force" scoped="" ref="0x404c0f08"/>
        <function-ref name="get" scoped="" ref="0x404c1578"/>
        <function-ref name="reset" scoped="" ref="0x404c0010"/>
        <function-ref name="getMode" scoped="" ref="0x404c0c90"/>
        <function-ref name="isOn" scoped="" ref="0x404c0778"/>
        <function-ref name="set" scoped="" ref="0x404c17f0"/>
        <function-ref name="start" scoped="" ref="0x404c0288"/>
        <function-ref name="stop" scoped="" ref="0x404c0500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x404b19d8" loc="41:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x404b19d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x404b9500"/>
        <function-ref name="test" scoped="" ref="0x404ba7d8"/>
        <function-ref name="get" scoped="" ref="0x404ba048"/>
        <function-ref name="reset" scoped="" ref="0x404baa50"/>
        <function-ref name="getMode" scoped="" ref="0x404b97a0"/>
        <function-ref name="overflow" scoped="" ref="0x404ba560"/>
        <function-ref name="isOn" scoped="" ref="0x404b9288"/>
        <function-ref name="set" scoped="" ref="0x404ba2c0"/>
        <function-ref name="start" scoped="" ref="0x404bacc8"/>
        <function-ref name="stop" scoped="" ref="0x404b9010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x404c5ae8" loc="51:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x404c5ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x404c5cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SfdCapture" ref="0x404bc6c8" loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SfdCapture" scoped="" ref="0x404bc6c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCapture"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x404c51a0"/>
        <function-ref name="test" scoped="" ref="0x404c7528"/>
        <function-ref name="fired" scoped="" ref="0x404c72b0"/>
        <function-ref name="get" scoped="" ref="0x404bcd10"/>
        <function-ref name="reset" scoped="" ref="0x404c77a0"/>
        <function-ref name="getMode" scoped="" ref="0x404c5440"/>
        <function-ref name="isOn" scoped="" ref="0x404c7f08"/>
        <function-ref name="set" scoped="" ref="0x404c7010"/>
        <function-ref name="start" scoped="" ref="0x404c7a18"/>
        <function-ref name="stop" scoped="" ref="0x404c7c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x404be320" loc="44:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x404be320"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x404bdd68"/>
        <function-ref name="test" scoped="" ref="0x404bd110"/>
        <function-ref name="fired" scoped="" ref="0x404bee80"/>
        <function-ref name="force" scoped="" ref="0x404bc2c0"/>
        <function-ref name="get" scoped="" ref="0x404be968"/>
        <function-ref name="reset" scoped="" ref="0x404bd388"/>
        <function-ref name="getMode" scoped="" ref="0x404bc048"/>
        <function-ref name="isOn" scoped="" ref="0x404bdaf0"/>
        <function-ref name="set" scoped="" ref="0x404bebe0"/>
        <function-ref name="start" scoped="" ref="0x404bd600"/>
        <function-ref name="stop" scoped="" ref="0x404bd878"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x4040be50" loc="47:/opt/tinyos/tos/chips/atm128rfa1/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x4040be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x4040e050"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x4040d218" loc="48:/opt/tinyos/tos/chips/atm128rfa1/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x4040d218"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x403283d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x403283d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4040d3f0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x4040d4d0"/>
        <function-ref name="led1On" scoped="" ref="0x4040d5b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x4040d690"/>
        <function-ref name="led3Off" scoped="" ref="0x4040d770"/>
        <function-ref name="led2Toggle" scoped="" ref="0x4040d850"/>
        <function-ref name="get" scoped="" ref="0x4040d930"/>
        <function-ref name="led1Off" scoped="" ref="0x4040da10"/>
        <function-ref name="led3Toggle" scoped="" ref="0x4040daf0"/>
        <function-ref name="led3On" scoped="" ref="0x4040dbd0"/>
        <function-ref name="led0On" scoped="" ref="0x4040dcb0"/>
        <function-ref name="led2Off" scoped="" ref="0x4040dd90"/>
        <function-ref name="led2On" scoped="" ref="0x4040de70"/>
        <function-ref name="set" scoped="" ref="0x40414010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x40332498" loc="43:/opt/tinyos/tos/chips/atm128rfa1/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x40332498"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x40332670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x4040c1a8" loc="44:/opt/tinyos/tos/chips/atm128rfa1/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x4040c1a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x4040c380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x4051f518" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <component-ref qname="Counter62khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x4051f518"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4051fc68"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40514170"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4051fee0"/>
        <function-ref name="overflow" scoped="" ref="0x405143e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405135b8" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="Counter62khz32C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405135b8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403287d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403287d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40513790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x405139f0" loc="40:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="Counter62khz32C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x405139f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4051e200"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4051e6f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4051e478"/>
        <function-ref name="overflow" scoped="" ref="0x4051e968"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCounter" ref="0x4051ec38" loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="Counter62khz32C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCounter" scoped="" ref="0x4051ec38"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x4052b698"/>
        <function-ref name="test" scoped="" ref="0x4052da28"/>
        <function-ref name="get" scoped="" ref="0x4052d298"/>
        <function-ref name="reset" scoped="" ref="0x4052dca0"/>
        <function-ref name="getMode" scoped="" ref="0x4052b938"/>
        <function-ref name="overflow" scoped="" ref="0x4052d7b0"/>
        <function-ref name="isOn" scoped="" ref="0x4052b420"/>
        <function-ref name="set" scoped="" ref="0x4052d510"/>
        <function-ref name="start" scoped="" ref="0x4052df18"/>
        <function-ref name="stop" scoped="" ref="0x4052b1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40529e90" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40529e90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40533600"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40533af0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40533878"/>
        <function-ref name="overflow" scoped="" ref="0x40533d68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x40530ae8" loc="63:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x40530ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40549308"/>
        <function-ref name="clearOverflow" scoped="" ref="0x405497f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40549580"/>
        <function-ref name="overflow" scoped="" ref="0x40549a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x405317f0" loc="62:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x405317f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40530010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40530500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40530288"/>
        <function-ref name="overflow" scoped="" ref="0x40530778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40acb6b8" loc="61:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.TransformAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40acb6b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40acab80"/>
        <function-ref name="fired" scoped="" ref="0x40aca350"/>
        <function-ref name="startAt" scoped="" ref="0x40aca840"/>
        <function-ref name="isRunning" scoped="" ref="0x40aca5c8"/>
        <function-ref name="getAlarm" scoped="" ref="0x40acadf8"/>
        <function-ref name="start" scoped="" ref="0x40acbe08"/>
        <function-ref name="stop" scoped="" ref="0x40aca0d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x40ac73b8" loc="73:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.TransformAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmFrom" scoped="" ref="0x40ac73b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404436e0"/>
            <typename><typedef-ref name="T62khz" ref="0x40443888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40ac6878"/>
        <function-ref name="fired" scoped="" ref="0x40ac6048"/>
        <function-ref name="startAt" scoped="" ref="0x40ac6538"/>
        <function-ref name="isRunning" scoped="" ref="0x40ac62c0"/>
        <function-ref name="getAlarm" scoped="" ref="0x40ac6af0"/>
        <function-ref name="start" scoped="" ref="0x40ac7b08"/>
        <function-ref name="stop" scoped="" ref="0x40ac7da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40ac8180" loc="68:/opt/tinyos/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.TransformAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40ac8180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ac88d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40ac8dc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40ac8b48"/>
        <function-ref name="overflow" scoped="" ref="0x40ac7048"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x405879a8" loc="74:/opt/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="TimerMilliP.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x405879a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40587b80"/>
        <function-ref name="runTask" scoped="" ref="0x40587c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x40578010" loc="49:/opt/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="TimerMilliP.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40578010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x405874e0"/>
        <function-ref name="fired" scoped="" ref="0x40578c78"/>
        <function-ref name="startAt" scoped="" ref="0x405871a0"/>
        <function-ref name="isRunning" scoped="" ref="0x40578ef0"/>
        <function-ref name="getAlarm" scoped="" ref="0x40587758"/>
        <function-ref name="start" scoped="" ref="0x40578760"/>
        <function-ref name="stop" scoped="" ref="0x40578a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40561cb0" loc="48:/opt/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="TimerMilliP.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40561cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4057a7c0"/>
        <function-ref name="fired" scoped="" ref="0x40560a40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4057a180"/>
        <function-ref name="isOneShot" scoped="" ref="0x40560ef0"/>
        <function-ref name="getdt" scoped="" ref="0x4057ac70"/>
        <function-ref name="gett0" scoped="" ref="0x4057aa18"/>
        <function-ref name="isRunning" scoped="" ref="0x40560c98"/>
        <function-ref name="startPeriodic" scoped="" ref="0x405602e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4057a4a0"/>
        <function-ref name="startOneShot" scoped="" ref="0x40560568"/>
        <function-ref name="stop" scoped="" ref="0x405607e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x405aa798" loc="71:/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="TimerMilliP.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x405aa798"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x405aa970"/>
        <function-ref name="runTask" scoped="" ref="0x405aaa50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x405ac5a0" loc="49:/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="TimerMilliP.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x405ac5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x405aa098"/>
        <function-ref name="fired" scoped="" ref="0x405ab330"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x405aba38"/>
        <function-ref name="isOneShot" scoped="" ref="0x405ab7e0"/>
        <function-ref name="getdt" scoped="" ref="0x405aa548"/>
        <function-ref name="gett0" scoped="" ref="0x405aa2f0"/>
        <function-ref name="isRunning" scoped="" ref="0x405ab588"/>
        <function-ref name="startPeriodic" scoped="" ref="0x405acbc8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x405abd58"/>
        <function-ref name="startOneShot" scoped="" ref="0x405ace48"/>
        <function-ref name="stop" scoped="" ref="0x405ab0d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40584210" loc="48:/opt/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="TimerMilliP.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40584210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x405aeda8"/>
        <function-ref name="fired" scoped="" ref="0x405ae010"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x405ae748"/>
        <function-ref name="isOneShot" scoped="" ref="0x405ae4e0"/>
        <function-ref name="getdt" scoped="" ref="0x405ac2b0"/>
        <function-ref name="gett0" scoped="" ref="0x405ac048"/>
        <function-ref name="isRunning" scoped="" ref="0x405ae278"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40584848"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x405aea78"/>
        <function-ref name="startOneShot" scoped="" ref="0x40584ad8"/>
        <function-ref name="stop" scoped="" ref="0x40584d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x405b64a0" loc="42:/opt/tinyos/tos/platforms/ucmini/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x405b64a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x405b6678"/>
        <function-ref name="led0Toggle" scoped="" ref="0x405b6758"/>
        <function-ref name="led1On" scoped="" ref="0x405b6838"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405b6918"/>
        <function-ref name="led3Off" scoped="" ref="0x405b69f8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405b6ad8"/>
        <function-ref name="get" scoped="" ref="0x405b6bb8"/>
        <function-ref name="led1Off" scoped="" ref="0x405b6c98"/>
        <function-ref name="led3Toggle" scoped="" ref="0x405b6d78"/>
        <function-ref name="led3On" scoped="" ref="0x405b6e58"/>
        <function-ref name="led0On" scoped="" ref="0x405b3010"/>
        <function-ref name="led2Off" scoped="" ref="0x405b30f0"/>
        <function-ref name="led2On" scoped="" ref="0x405b31d0"/>
        <function-ref name="set" scoped="" ref="0x405b3330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x405be060" loc="50:/opt/tinyos/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x405be060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405be238"/>
        <function-ref name="isInput" scoped="" ref="0x405be318"/>
        <function-ref name="toggle" scoped="" ref="0x405be3f8"/>
        <function-ref name="isOutput" scoped="" ref="0x405be4d8"/>
        <function-ref name="get" scoped="" ref="0x405be5b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405be698"/>
        <function-ref name="set" scoped="" ref="0x405be778"/>
        <function-ref name="clr" scoped="" ref="0x405be858"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led3" ref="0x405bde88" loc="53:/opt/tinyos/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led3" scoped="" ref="0x405bde88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405ba070"/>
        <function-ref name="isInput" scoped="" ref="0x405ba150"/>
        <function-ref name="toggle" scoped="" ref="0x405ba230"/>
        <function-ref name="isOutput" scoped="" ref="0x405ba310"/>
        <function-ref name="get" scoped="" ref="0x405ba3f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405ba4d0"/>
        <function-ref name="set" scoped="" ref="0x405ba5b0"/>
        <function-ref name="clr" scoped="" ref="0x405ba690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405b3bb8" loc="46:/opt/tinyos/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405b3bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405b3d90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x405bea48" loc="51:/opt/tinyos/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x405bea48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405bec20"/>
        <function-ref name="isInput" scoped="" ref="0x405bed00"/>
        <function-ref name="toggle" scoped="" ref="0x405bede0"/>
        <function-ref name="isOutput" scoped="" ref="0x405beec0"/>
        <function-ref name="get" scoped="" ref="0x405bd010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405bd0f0"/>
        <function-ref name="set" scoped="" ref="0x405bd1d0"/>
        <function-ref name="clr" scoped="" ref="0x405bd2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x405b3f00" loc="47:/opt/tinyos/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x405b3f00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x405b00f0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x405b01d0"/>
        <function-ref name="led1On" scoped="" ref="0x405b02b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405b0390"/>
        <function-ref name="led3Off" scoped="" ref="0x405b0470"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405b0550"/>
        <function-ref name="get" scoped="" ref="0x405b0630"/>
        <function-ref name="led1Off" scoped="" ref="0x405b0710"/>
        <function-ref name="led3Toggle" scoped="" ref="0x405b07f0"/>
        <function-ref name="led3On" scoped="" ref="0x405b08d0"/>
        <function-ref name="led0On" scoped="" ref="0x405b09b0"/>
        <function-ref name="led2Off" scoped="" ref="0x405b0a90"/>
        <function-ref name="led2On" scoped="" ref="0x405b0b70"/>
        <function-ref name="set" scoped="" ref="0x405b0cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x405bd4a0" loc="52:/opt/tinyos/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x405bd4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405bd678"/>
        <function-ref name="isInput" scoped="" ref="0x405bd758"/>
        <function-ref name="toggle" scoped="" ref="0x405bd838"/>
        <function-ref name="isOutput" scoped="" ref="0x405bd918"/>
        <function-ref name="get" scoped="" ref="0x405bd9f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405bdad8"/>
        <function-ref name="set" scoped="" ref="0x405bdbb8"/>
        <function-ref name="clr" scoped="" ref="0x405bdc98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x405b27a0" loc="39:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x405b27a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405b2978"/>
        <function-ref name="isInput" scoped="" ref="0x405b2a58"/>
        <function-ref name="toggle" scoped="" ref="0x405b2b38"/>
        <function-ref name="isOutput" scoped="" ref="0x405b2c18"/>
        <function-ref name="get" scoped="" ref="0x405b2cf8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405b2dd8"/>
        <function-ref name="set" scoped="" ref="0x405b2eb8"/>
        <function-ref name="clr" scoped="" ref="0x405d7010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led3" ref="0x405d6660" loc="42:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led3" scoped="" ref="0x405d6660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d6838"/>
        <function-ref name="isInput" scoped="" ref="0x405d6918"/>
        <function-ref name="toggle" scoped="" ref="0x405d69f8"/>
        <function-ref name="isOutput" scoped="" ref="0x405d6ad8"/>
        <function-ref name="get" scoped="" ref="0x405d6bb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d6c98"/>
        <function-ref name="set" scoped="" ref="0x405d6d78"/>
        <function-ref name="clr" scoped="" ref="0x405d6e58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x405d7200" loc="40:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x405d7200"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d73d8"/>
        <function-ref name="isInput" scoped="" ref="0x405d74b8"/>
        <function-ref name="toggle" scoped="" ref="0x405d7598"/>
        <function-ref name="isOutput" scoped="" ref="0x405d7678"/>
        <function-ref name="get" scoped="" ref="0x405d7758"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d7838"/>
        <function-ref name="set" scoped="" ref="0x405d7918"/>
        <function-ref name="clr" scoped="" ref="0x405d79f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x405d4010" loc="45:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405d4010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405d41e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x405d7be8" loc="41:/opt/tinyos/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x405d7be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d7dc0"/>
        <function-ref name="isInput" scoped="" ref="0x405d7ea0"/>
        <function-ref name="toggle" scoped="" ref="0x405d6010"/>
        <function-ref name="isOutput" scoped="" ref="0x405d60f0"/>
        <function-ref name="get" scoped="" ref="0x405d61d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d62b0"/>
        <function-ref name="set" scoped="" ref="0x405d6390"/>
        <function-ref name="clr" scoped="" ref="0x405d6470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x405f9670" loc="93:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x405f9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f9a48"/>
        <function-ref name="isInput" scoped="" ref="0x405f9b28"/>
        <function-ref name="toggle" scoped="" ref="0x405f9c08"/>
        <function-ref name="isOutput" scoped="" ref="0x405f9ce8"/>
        <function-ref name="get" scoped="" ref="0x405f9dc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f9ea8"/>
        <function-ref name="set" scoped="" ref="0x405f8010"/>
        <function-ref name="clr" scoped="" ref="0x405f80f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x405e5b98" loc="67:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x405e5b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e5d70"/>
        <function-ref name="isInput" scoped="" ref="0x405e5e50"/>
        <function-ref name="toggle" scoped="" ref="0x405e4010"/>
        <function-ref name="isOutput" scoped="" ref="0x405e40f0"/>
        <function-ref name="get" scoped="" ref="0x405e41d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e42b0"/>
        <function-ref name="set" scoped="" ref="0x405e4390"/>
        <function-ref name="clr" scoped="" ref="0x405e4470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x405f0210" loc="78:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x405f0210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f03e8"/>
        <function-ref name="isInput" scoped="" ref="0x405f04c8"/>
        <function-ref name="toggle" scoped="" ref="0x405f05a8"/>
        <function-ref name="isOutput" scoped="" ref="0x405f0688"/>
        <function-ref name="get" scoped="" ref="0x405f0768"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f0848"/>
        <function-ref name="set" scoped="" ref="0x405f0928"/>
        <function-ref name="clr" scoped="" ref="0x405f0a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x405ea2f0" loc="87:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x405ea2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405ea4c8"/>
        <function-ref name="isInput" scoped="" ref="0x405ea5a8"/>
        <function-ref name="toggle" scoped="" ref="0x405ea688"/>
        <function-ref name="isOutput" scoped="" ref="0x405ea768"/>
        <function-ref name="get" scoped="" ref="0x405ea848"/>
        <function-ref name="makeOutput" scoped="" ref="0x405ea928"/>
        <function-ref name="set" scoped="" ref="0x405eaa08"/>
        <function-ref name="clr" scoped="" ref="0x405eaae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x405f6c08" loc="98:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x405f6c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f6de0"/>
        <function-ref name="isInput" scoped="" ref="0x405f6ec0"/>
        <function-ref name="toggle" scoped="" ref="0x405f5010"/>
        <function-ref name="isOutput" scoped="" ref="0x405f50f0"/>
        <function-ref name="get" scoped="" ref="0x405f51d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f52b0"/>
        <function-ref name="set" scoped="" ref="0x405f5390"/>
        <function-ref name="clr" scoped="" ref="0x405f5470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x405df750" loc="45:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x405df750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405df928"/>
        <function-ref name="isInput" scoped="" ref="0x405dfa08"/>
        <function-ref name="toggle" scoped="" ref="0x405dfae8"/>
        <function-ref name="isOutput" scoped="" ref="0x405dfbc8"/>
        <function-ref name="get" scoped="" ref="0x405dfca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405dfd88"/>
        <function-ref name="set" scoped="" ref="0x405dfe68"/>
        <function-ref name="clr" scoped="" ref="0x405de010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x405ecea8" loc="85:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x405ecea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405eb0c0"/>
        <function-ref name="isInput" scoped="" ref="0x405eb1a0"/>
        <function-ref name="toggle" scoped="" ref="0x405eb280"/>
        <function-ref name="isOutput" scoped="" ref="0x405eb360"/>
        <function-ref name="get" scoped="" ref="0x405eb440"/>
        <function-ref name="makeOutput" scoped="" ref="0x405eb520"/>
        <function-ref name="set" scoped="" ref="0x405eb600"/>
        <function-ref name="clr" scoped="" ref="0x405eb6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x405dec08" loc="48:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x405dec08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405dede0"/>
        <function-ref name="isInput" scoped="" ref="0x405deec0"/>
        <function-ref name="toggle" scoped="" ref="0x405dd010"/>
        <function-ref name="isOutput" scoped="" ref="0x405dd0f0"/>
        <function-ref name="get" scoped="" ref="0x405dd1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405dd2b0"/>
        <function-ref name="set" scoped="" ref="0x405dd390"/>
        <function-ref name="clr" scoped="" ref="0x405dd470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x405e92f0" loc="59:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x405e92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e94c8"/>
        <function-ref name="isInput" scoped="" ref="0x405e95a8"/>
        <function-ref name="toggle" scoped="" ref="0x405e9688"/>
        <function-ref name="isOutput" scoped="" ref="0x405e9768"/>
        <function-ref name="get" scoped="" ref="0x405e9848"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e9928"/>
        <function-ref name="set" scoped="" ref="0x405e9a08"/>
        <function-ref name="clr" scoped="" ref="0x405e9ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x405e3a98" loc="70:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x405e3a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e3c70"/>
        <function-ref name="isInput" scoped="" ref="0x405e3d50"/>
        <function-ref name="toggle" scoped="" ref="0x405e3e30"/>
        <function-ref name="isOutput" scoped="" ref="0x405e3f10"/>
        <function-ref name="get" scoped="" ref="0x405e2010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e20f0"/>
        <function-ref name="set" scoped="" ref="0x405e21d0"/>
        <function-ref name="clr" scoped="" ref="0x405e22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x405ed0a0" loc="81:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x405ed0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405ed278"/>
        <function-ref name="isInput" scoped="" ref="0x405ed358"/>
        <function-ref name="toggle" scoped="" ref="0x405ed438"/>
        <function-ref name="isOutput" scoped="" ref="0x405ed518"/>
        <function-ref name="get" scoped="" ref="0x405ed5f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405ed6d8"/>
        <function-ref name="set" scoped="" ref="0x405ed7b8"/>
        <function-ref name="clr" scoped="" ref="0x405ed898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x405d13d0" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x405d13d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d15a8"/>
        <function-ref name="isInput" scoped="" ref="0x405d1688"/>
        <function-ref name="toggle" scoped="" ref="0x405d1768"/>
        <function-ref name="isOutput" scoped="" ref="0x405d1848"/>
        <function-ref name="get" scoped="" ref="0x405d1928"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d1a08"/>
        <function-ref name="set" scoped="" ref="0x405d1ae8"/>
        <function-ref name="clr" scoped="" ref="0x405d1bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x405dca98" loc="51:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x405dca98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405dcc70"/>
        <function-ref name="isInput" scoped="" ref="0x405dcd50"/>
        <function-ref name="toggle" scoped="" ref="0x405dce30"/>
        <function-ref name="isOutput" scoped="" ref="0x405dcf10"/>
        <function-ref name="get" scoped="" ref="0x405db010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405db0f0"/>
        <function-ref name="set" scoped="" ref="0x405db1d0"/>
        <function-ref name="clr" scoped="" ref="0x405db2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x405e7210" loc="62:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x405e7210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e73e8"/>
        <function-ref name="isInput" scoped="" ref="0x405e74c8"/>
        <function-ref name="toggle" scoped="" ref="0x405e75a8"/>
        <function-ref name="isOutput" scoped="" ref="0x405e7688"/>
        <function-ref name="get" scoped="" ref="0x405e7768"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e7848"/>
        <function-ref name="set" scoped="" ref="0x405e7928"/>
        <function-ref name="clr" scoped="" ref="0x405e7a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x405e18e0" loc="73:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x405e18e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e1ab8"/>
        <function-ref name="isInput" scoped="" ref="0x405e1b98"/>
        <function-ref name="toggle" scoped="" ref="0x405e1c78"/>
        <function-ref name="isOutput" scoped="" ref="0x405e1d58"/>
        <function-ref name="get" scoped="" ref="0x405e1e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e1f18"/>
        <function-ref name="set" scoped="" ref="0x405f2010"/>
        <function-ref name="clr" scoped="" ref="0x405f20f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x405fa210" loc="90:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x405fa210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405fa3e8"/>
        <function-ref name="isInput" scoped="" ref="0x405fa4c8"/>
        <function-ref name="toggle" scoped="" ref="0x405fa5a8"/>
        <function-ref name="isOutput" scoped="" ref="0x405fa688"/>
        <function-ref name="get" scoped="" ref="0x405fa768"/>
        <function-ref name="makeOutput" scoped="" ref="0x405fa848"/>
        <function-ref name="set" scoped="" ref="0x405fa928"/>
        <function-ref name="clr" scoped="" ref="0x405faa08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x405f7750" loc="96:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x405f7750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f7928"/>
        <function-ref name="isInput" scoped="" ref="0x405f7a08"/>
        <function-ref name="toggle" scoped="" ref="0x405f7ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x405f7bc8"/>
        <function-ref name="get" scoped="" ref="0x405f7ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f7d88"/>
        <function-ref name="set" scoped="" ref="0x405f7e68"/>
        <function-ref name="clr" scoped="" ref="0x405f6010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x405f2ce8" loc="76:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x405f2ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f2ec0"/>
        <function-ref name="isInput" scoped="" ref="0x405f1010"/>
        <function-ref name="toggle" scoped="" ref="0x405f10f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405f11d0"/>
        <function-ref name="get" scoped="" ref="0x405f12b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f1390"/>
        <function-ref name="set" scoped="" ref="0x405f1470"/>
        <function-ref name="clr" scoped="" ref="0x405f1550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x405e02f0" loc="43:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x405e02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e04c8"/>
        <function-ref name="isInput" scoped="" ref="0x405e05a8"/>
        <function-ref name="toggle" scoped="" ref="0x405e0688"/>
        <function-ref name="isOutput" scoped="" ref="0x405e0768"/>
        <function-ref name="get" scoped="" ref="0x405e0848"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e0928"/>
        <function-ref name="set" scoped="" ref="0x405e0a08"/>
        <function-ref name="clr" scoped="" ref="0x405e0ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x405da930" loc="54:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x405da930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405dab08"/>
        <function-ref name="isInput" scoped="" ref="0x405dabe8"/>
        <function-ref name="toggle" scoped="" ref="0x405dacc8"/>
        <function-ref name="isOutput" scoped="" ref="0x405dada8"/>
        <function-ref name="get" scoped="" ref="0x405dae88"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d9010"/>
        <function-ref name="set" scoped="" ref="0x405d90f0"/>
        <function-ref name="clr" scoped="" ref="0x405d91d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x405f82f0" loc="94:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x405f82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f84c8"/>
        <function-ref name="isInput" scoped="" ref="0x405f85a8"/>
        <function-ref name="toggle" scoped="" ref="0x405f8688"/>
        <function-ref name="isOutput" scoped="" ref="0x405f8768"/>
        <function-ref name="get" scoped="" ref="0x405f8848"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f8928"/>
        <function-ref name="set" scoped="" ref="0x405f8a08"/>
        <function-ref name="clr" scoped="" ref="0x405f8ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x405d9dc8" loc="57:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x405d9dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d8010"/>
        <function-ref name="isInput" scoped="" ref="0x405d80f0"/>
        <function-ref name="toggle" scoped="" ref="0x405d81d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405d82b0"/>
        <function-ref name="get" scoped="" ref="0x405d8390"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d8470"/>
        <function-ref name="set" scoped="" ref="0x405d8550"/>
        <function-ref name="clr" scoped="" ref="0x405d8630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x405e4670" loc="68:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x405e4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e4848"/>
        <function-ref name="isInput" scoped="" ref="0x405e4928"/>
        <function-ref name="toggle" scoped="" ref="0x405e4a08"/>
        <function-ref name="isOutput" scoped="" ref="0x405e4ae8"/>
        <function-ref name="get" scoped="" ref="0x405e4bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e4ca8"/>
        <function-ref name="set" scoped="" ref="0x405e4d88"/>
        <function-ref name="clr" scoped="" ref="0x405e4e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x405f0c08" loc="79:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x405f0c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f0de0"/>
        <function-ref name="isInput" scoped="" ref="0x405f0ec0"/>
        <function-ref name="toggle" scoped="" ref="0x405ef010"/>
        <function-ref name="isOutput" scoped="" ref="0x405ef0f0"/>
        <function-ref name="get" scoped="" ref="0x405ef1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405ef2b0"/>
        <function-ref name="set" scoped="" ref="0x405ef390"/>
        <function-ref name="clr" scoped="" ref="0x405ef470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x405eace8" loc="88:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x405eace8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405eaec0"/>
        <function-ref name="isInput" scoped="" ref="0x405fb010"/>
        <function-ref name="toggle" scoped="" ref="0x405fb0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405fb1d0"/>
        <function-ref name="get" scoped="" ref="0x405fb2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405fb390"/>
        <function-ref name="set" scoped="" ref="0x405fb470"/>
        <function-ref name="clr" scoped="" ref="0x405fb550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x405de210" loc="46:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x405de210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405de3e8"/>
        <function-ref name="isInput" scoped="" ref="0x405de4c8"/>
        <function-ref name="toggle" scoped="" ref="0x405de5a8"/>
        <function-ref name="isOutput" scoped="" ref="0x405de688"/>
        <function-ref name="get" scoped="" ref="0x405de768"/>
        <function-ref name="makeOutput" scoped="" ref="0x405de848"/>
        <function-ref name="set" scoped="" ref="0x405de928"/>
        <function-ref name="clr" scoped="" ref="0x405dea08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x405dd670" loc="49:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x405dd670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405dd848"/>
        <function-ref name="isInput" scoped="" ref="0x405dd928"/>
        <function-ref name="toggle" scoped="" ref="0x405dda08"/>
        <function-ref name="isOutput" scoped="" ref="0x405ddae8"/>
        <function-ref name="get" scoped="" ref="0x405ddbc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405ddca8"/>
        <function-ref name="set" scoped="" ref="0x405ddd88"/>
        <function-ref name="clr" scoped="" ref="0x405dde68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x405e9ce8" loc="60:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x405e9ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e9ec0"/>
        <function-ref name="isInput" scoped="" ref="0x405e8010"/>
        <function-ref name="toggle" scoped="" ref="0x405e80f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405e81d0"/>
        <function-ref name="get" scoped="" ref="0x405e82b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e8390"/>
        <function-ref name="set" scoped="" ref="0x405e8470"/>
        <function-ref name="clr" scoped="" ref="0x405e8550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x405e24b0" loc="71:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x405e24b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e2688"/>
        <function-ref name="isInput" scoped="" ref="0x405e2768"/>
        <function-ref name="toggle" scoped="" ref="0x405e2848"/>
        <function-ref name="isOutput" scoped="" ref="0x405e2928"/>
        <function-ref name="get" scoped="" ref="0x405e2a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e2ae8"/>
        <function-ref name="set" scoped="" ref="0x405e2bc8"/>
        <function-ref name="clr" scoped="" ref="0x405e2ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x405eda98" loc="82:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x405eda98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405edc70"/>
        <function-ref name="isInput" scoped="" ref="0x405edd50"/>
        <function-ref name="toggle" scoped="" ref="0x405ede30"/>
        <function-ref name="isOutput" scoped="" ref="0x405edf10"/>
        <function-ref name="get" scoped="" ref="0x405ec010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405ec0f0"/>
        <function-ref name="set" scoped="" ref="0x405ec1d0"/>
        <function-ref name="clr" scoped="" ref="0x405ec2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x405d1dc8" loc="41:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x405d1dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d0010"/>
        <function-ref name="isInput" scoped="" ref="0x405d00f0"/>
        <function-ref name="toggle" scoped="" ref="0x405d01d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405d02b0"/>
        <function-ref name="get" scoped="" ref="0x405d0390"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d0470"/>
        <function-ref name="set" scoped="" ref="0x405d0550"/>
        <function-ref name="clr" scoped="" ref="0x405d0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x405db4b0" loc="52:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x405db4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405db708"/>
        <function-ref name="isInput" scoped="" ref="0x405db7e8"/>
        <function-ref name="toggle" scoped="" ref="0x405db8c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405db9a8"/>
        <function-ref name="get" scoped="" ref="0x405dba88"/>
        <function-ref name="makeOutput" scoped="" ref="0x405dbb68"/>
        <function-ref name="set" scoped="" ref="0x405dbc48"/>
        <function-ref name="clr" scoped="" ref="0x405dbd28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x405e7c08" loc="63:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x405e7c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e7de0"/>
        <function-ref name="isInput" scoped="" ref="0x405e7ec0"/>
        <function-ref name="toggle" scoped="" ref="0x405e6010"/>
        <function-ref name="isOutput" scoped="" ref="0x405e60f0"/>
        <function-ref name="get" scoped="" ref="0x405e61d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e62b0"/>
        <function-ref name="set" scoped="" ref="0x405e6390"/>
        <function-ref name="clr" scoped="" ref="0x405e6470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x405fac08" loc="91:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x405fac08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405fade0"/>
        <function-ref name="isInput" scoped="" ref="0x405faec0"/>
        <function-ref name="toggle" scoped="" ref="0x405f9010"/>
        <function-ref name="isOutput" scoped="" ref="0x405f90f0"/>
        <function-ref name="get" scoped="" ref="0x405f91d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f92b0"/>
        <function-ref name="set" scoped="" ref="0x405f9390"/>
        <function-ref name="clr" scoped="" ref="0x405f9470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x405e50a0" loc="66:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x405e50a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e5378"/>
        <function-ref name="isInput" scoped="" ref="0x405e5458"/>
        <function-ref name="toggle" scoped="" ref="0x405e5538"/>
        <function-ref name="isOutput" scoped="" ref="0x405e5618"/>
        <function-ref name="get" scoped="" ref="0x405e56f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e57d8"/>
        <function-ref name="set" scoped="" ref="0x405e58b8"/>
        <function-ref name="clr" scoped="" ref="0x405e5998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x405f1750" loc="77:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x405f1750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f1928"/>
        <function-ref name="isInput" scoped="" ref="0x405f1a08"/>
        <function-ref name="toggle" scoped="" ref="0x405f1ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x405f1bc8"/>
        <function-ref name="get" scoped="" ref="0x405f1ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f1d88"/>
        <function-ref name="set" scoped="" ref="0x405f1e68"/>
        <function-ref name="clr" scoped="" ref="0x405f0010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x405eb8e0" loc="86:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x405eb8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405ebab8"/>
        <function-ref name="isInput" scoped="" ref="0x405ebb98"/>
        <function-ref name="toggle" scoped="" ref="0x405ebc78"/>
        <function-ref name="isOutput" scoped="" ref="0x405ebd58"/>
        <function-ref name="get" scoped="" ref="0x405ebe38"/>
        <function-ref name="makeOutput" scoped="" ref="0x405ebf18"/>
        <function-ref name="set" scoped="" ref="0x405ea010"/>
        <function-ref name="clr" scoped="" ref="0x405ea0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x405f6210" loc="97:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x405f6210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f63e8"/>
        <function-ref name="isInput" scoped="" ref="0x405f64c8"/>
        <function-ref name="toggle" scoped="" ref="0x405f65a8"/>
        <function-ref name="isOutput" scoped="" ref="0x405f6688"/>
        <function-ref name="get" scoped="" ref="0x405f6768"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f6848"/>
        <function-ref name="set" scoped="" ref="0x405f6928"/>
        <function-ref name="clr" scoped="" ref="0x405f6a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x405e0ce8" loc="44:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x405e0ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e0ec0"/>
        <function-ref name="isInput" scoped="" ref="0x405df010"/>
        <function-ref name="toggle" scoped="" ref="0x405df0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405df1d0"/>
        <function-ref name="get" scoped="" ref="0x405df2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405df390"/>
        <function-ref name="set" scoped="" ref="0x405df470"/>
        <function-ref name="clr" scoped="" ref="0x405df550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x405d93d0" loc="55:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x405d93d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d95a8"/>
        <function-ref name="isInput" scoped="" ref="0x405d9688"/>
        <function-ref name="toggle" scoped="" ref="0x405d9768"/>
        <function-ref name="isOutput" scoped="" ref="0x405d9848"/>
        <function-ref name="get" scoped="" ref="0x405d9928"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d9a08"/>
        <function-ref name="set" scoped="" ref="0x405d9ae8"/>
        <function-ref name="clr" scoped="" ref="0x405d9bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x405ec4b0" loc="84:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x405ec4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405ec688"/>
        <function-ref name="isInput" scoped="" ref="0x405ec768"/>
        <function-ref name="toggle" scoped="" ref="0x405ec848"/>
        <function-ref name="isOutput" scoped="" ref="0x405ec928"/>
        <function-ref name="get" scoped="" ref="0x405eca08"/>
        <function-ref name="makeOutput" scoped="" ref="0x405ecae8"/>
        <function-ref name="set" scoped="" ref="0x405ecbc8"/>
        <function-ref name="clr" scoped="" ref="0x405ecca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x405d8830" loc="58:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x405d8830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d8a08"/>
        <function-ref name="isInput" scoped="" ref="0x405d8ae8"/>
        <function-ref name="toggle" scoped="" ref="0x405d8bc8"/>
        <function-ref name="isOutput" scoped="" ref="0x405d8ca8"/>
        <function-ref name="get" scoped="" ref="0x405d8d88"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d8e68"/>
        <function-ref name="set" scoped="" ref="0x405e9010"/>
        <function-ref name="clr" scoped="" ref="0x405e90f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x405e30a0" loc="69:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x405e30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e3278"/>
        <function-ref name="isInput" scoped="" ref="0x405e3358"/>
        <function-ref name="toggle" scoped="" ref="0x405e3438"/>
        <function-ref name="isOutput" scoped="" ref="0x405e3518"/>
        <function-ref name="get" scoped="" ref="0x405e35f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e36d8"/>
        <function-ref name="set" scoped="" ref="0x405e37b8"/>
        <function-ref name="clr" scoped="" ref="0x405e3898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x405ef670" loc="80:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x405ef670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405ef848"/>
        <function-ref name="isInput" scoped="" ref="0x405ef928"/>
        <function-ref name="toggle" scoped="" ref="0x405efa08"/>
        <function-ref name="isOutput" scoped="" ref="0x405efae8"/>
        <function-ref name="get" scoped="" ref="0x405efbc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405efca8"/>
        <function-ref name="set" scoped="" ref="0x405efd88"/>
        <function-ref name="clr" scoped="" ref="0x405efe68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x405fb750" loc="89:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x405fb750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405fb928"/>
        <function-ref name="isInput" scoped="" ref="0x405fba08"/>
        <function-ref name="toggle" scoped="" ref="0x405fbae8"/>
        <function-ref name="isOutput" scoped="" ref="0x405fbbc8"/>
        <function-ref name="get" scoped="" ref="0x405fbca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405fbd88"/>
        <function-ref name="set" scoped="" ref="0x405fbe68"/>
        <function-ref name="clr" scoped="" ref="0x405fa010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x405d4958" loc="39:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x405d4958"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d4b30"/>
        <function-ref name="isInput" scoped="" ref="0x405d4c10"/>
        <function-ref name="toggle" scoped="" ref="0x405d4cf0"/>
        <function-ref name="isOutput" scoped="" ref="0x405d4dd0"/>
        <function-ref name="get" scoped="" ref="0x405d4eb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d1010"/>
        <function-ref name="set" scoped="" ref="0x405d10f0"/>
        <function-ref name="clr" scoped="" ref="0x405d11d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x405dc0a0" loc="50:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x405dc0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405dc278"/>
        <function-ref name="isInput" scoped="" ref="0x405dc358"/>
        <function-ref name="toggle" scoped="" ref="0x405dc438"/>
        <function-ref name="isOutput" scoped="" ref="0x405dc518"/>
        <function-ref name="get" scoped="" ref="0x405dc5f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405dc6d8"/>
        <function-ref name="set" scoped="" ref="0x405dc7b8"/>
        <function-ref name="clr" scoped="" ref="0x405dc898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x405e8750" loc="61:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x405e8750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e8928"/>
        <function-ref name="isInput" scoped="" ref="0x405e8a08"/>
        <function-ref name="toggle" scoped="" ref="0x405e8ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x405e8bc8"/>
        <function-ref name="get" scoped="" ref="0x405e8ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e8d88"/>
        <function-ref name="set" scoped="" ref="0x405e8e68"/>
        <function-ref name="clr" scoped="" ref="0x405e7010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x405e2ea8" loc="72:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x405e2ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e10c0"/>
        <function-ref name="isInput" scoped="" ref="0x405e11a0"/>
        <function-ref name="toggle" scoped="" ref="0x405e1280"/>
        <function-ref name="isOutput" scoped="" ref="0x405e1360"/>
        <function-ref name="get" scoped="" ref="0x405e1440"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e1520"/>
        <function-ref name="set" scoped="" ref="0x405e1600"/>
        <function-ref name="clr" scoped="" ref="0x405e16e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x405f8ce8" loc="95:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x405f8ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f8ec0"/>
        <function-ref name="isInput" scoped="" ref="0x405f7010"/>
        <function-ref name="toggle" scoped="" ref="0x405f70f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405f71d0"/>
        <function-ref name="get" scoped="" ref="0x405f72b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f7390"/>
        <function-ref name="set" scoped="" ref="0x405f7470"/>
        <function-ref name="clr" scoped="" ref="0x405f7550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x405f22f0" loc="75:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x405f22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f24c8"/>
        <function-ref name="isInput" scoped="" ref="0x405f25a8"/>
        <function-ref name="toggle" scoped="" ref="0x405f2688"/>
        <function-ref name="isOutput" scoped="" ref="0x405f2768"/>
        <function-ref name="get" scoped="" ref="0x405f2848"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f2928"/>
        <function-ref name="set" scoped="" ref="0x405f2a08"/>
        <function-ref name="clr" scoped="" ref="0x405f2ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x405e6670" loc="64:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x405e6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e6848"/>
        <function-ref name="isInput" scoped="" ref="0x405e6928"/>
        <function-ref name="toggle" scoped="" ref="0x405e6a08"/>
        <function-ref name="isOutput" scoped="" ref="0x405e6ae8"/>
        <function-ref name="get" scoped="" ref="0x405e6bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e6ca8"/>
        <function-ref name="set" scoped="" ref="0x405e6d88"/>
        <function-ref name="clr" scoped="" ref="0x405e6e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x405d0830" loc="42:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x405d0830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405d0a08"/>
        <function-ref name="isInput" scoped="" ref="0x405d0ae8"/>
        <function-ref name="toggle" scoped="" ref="0x405d0bc8"/>
        <function-ref name="isOutput" scoped="" ref="0x405d0ca8"/>
        <function-ref name="get" scoped="" ref="0x405d0d88"/>
        <function-ref name="makeOutput" scoped="" ref="0x405d0e68"/>
        <function-ref name="set" scoped="" ref="0x405e0010"/>
        <function-ref name="clr" scoped="" ref="0x405e00f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x405dbf28" loc="53:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x405dbf28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405da110"/>
        <function-ref name="isInput" scoped="" ref="0x405da1f0"/>
        <function-ref name="toggle" scoped="" ref="0x405da2d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405da3b0"/>
        <function-ref name="get" scoped="" ref="0x405da490"/>
        <function-ref name="makeOutput" scoped="" ref="0x405da570"/>
        <function-ref name="set" scoped="" ref="0x405da650"/>
        <function-ref name="clr" scoped="" ref="0x405da730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x405f3498" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x405f3498"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f3680"/>
        <function-ref name="isInput" scoped="" ref="0x405f3760"/>
        <function-ref name="toggle" scoped="" ref="0x405f3840"/>
        <function-ref name="isOutput" scoped="" ref="0x405f3920"/>
        <function-ref name="get" scoped="" ref="0x405f3a00"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f3ae0"/>
        <function-ref name="set" scoped="" ref="0x405f3bc0"/>
        <function-ref name="clr" scoped="" ref="0x405f3ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x40605dc0" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x40605dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40616010"/>
        <function-ref name="isInput" scoped="" ref="0x406160f0"/>
        <function-ref name="toggle" scoped="" ref="0x406161d0"/>
        <function-ref name="isOutput" scoped="" ref="0x406162b0"/>
        <function-ref name="get" scoped="" ref="0x40616390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40616470"/>
        <function-ref name="set" scoped="" ref="0x40616550"/>
        <function-ref name="clr" scoped="" ref="0x40616630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x40613690" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x40613690"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40613878"/>
        <function-ref name="isInput" scoped="" ref="0x40613958"/>
        <function-ref name="toggle" scoped="" ref="0x40613a38"/>
        <function-ref name="isOutput" scoped="" ref="0x40613b18"/>
        <function-ref name="get" scoped="" ref="0x40613bf8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40613cd8"/>
        <function-ref name="set" scoped="" ref="0x40613db8"/>
        <function-ref name="clr" scoped="" ref="0x40613e98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x40610f28" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x40610f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4060f120"/>
        <function-ref name="isInput" scoped="" ref="0x4060f200"/>
        <function-ref name="toggle" scoped="" ref="0x4060f2e0"/>
        <function-ref name="isOutput" scoped="" ref="0x4060f3c0"/>
        <function-ref name="get" scoped="" ref="0x4060f4a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4060f580"/>
        <function-ref name="set" scoped="" ref="0x4060f660"/>
        <function-ref name="clr" scoped="" ref="0x4060f740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x4061d7a8" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x4061d7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4061d990"/>
        <function-ref name="isInput" scoped="" ref="0x4061da70"/>
        <function-ref name="toggle" scoped="" ref="0x4061db50"/>
        <function-ref name="isOutput" scoped="" ref="0x4061dc30"/>
        <function-ref name="get" scoped="" ref="0x4061dd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x4061ddf0"/>
        <function-ref name="set" scoped="" ref="0x4061ded0"/>
        <function-ref name="clr" scoped="" ref="0x4061c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x40619068" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x40619068"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40619250"/>
        <function-ref name="isInput" scoped="" ref="0x40619330"/>
        <function-ref name="toggle" scoped="" ref="0x40619410"/>
        <function-ref name="isOutput" scoped="" ref="0x406194f0"/>
        <function-ref name="get" scoped="" ref="0x406195d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406196b0"/>
        <function-ref name="set" scoped="" ref="0x40619790"/>
        <function-ref name="clr" scoped="" ref="0x40619870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x406278a0" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortG"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x406278a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40627a88"/>
        <function-ref name="isInput" scoped="" ref="0x40627b68"/>
        <function-ref name="toggle" scoped="" ref="0x40627c48"/>
        <function-ref name="isOutput" scoped="" ref="0x40627d28"/>
        <function-ref name="get" scoped="" ref="0x40627e08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40627ee8"/>
        <function-ref name="set" scoped="" ref="0x40626010"/>
        <function-ref name="clr" scoped="" ref="0x406260f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40638bf8" loc="39:/opt/tinyos/tos/platforms/ucmini/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40638bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40638dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x40635010" loc="40:/opt/tinyos/tos/platforms/ucmini/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40635010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x406351e8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x406352c8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x406353a8"/>
        <function-ref name="actualMicro" scoped="" ref="0x40635488"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40635568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x40635780" loc="43:/opt/tinyos/tos/platforms/ucmini/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LedsInit" scoped="" ref="0x40635780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40635958"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40647a48" loc="39:/opt/tinyos/tos/platforms/ucmini/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40647a48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40647c20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Stm25pInit" ref="0x40646608" loc="45:/opt/tinyos/tos/platforms/ucmini/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Stm25pInit" scoped="" ref="0x40646608"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406467e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x40646238" loc="44:/opt/tinyos/tos/platforms/ucmini/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LedsInit" scoped="" ref="0x40646238"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40646410"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuInit" ref="0x40647e38" loc="43:/opt/tinyos/tos/platforms/ucmini/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuInit" scoped="" ref="0x40647e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40646050"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Stm25pOff" ref="0x40634df0" loc="36:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/Stm25pOffC.nc">
      <component-ref qname="Stm25pOffC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Stm25pOff" scoped="" ref="0x40634df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40641010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Toggle" ref="0x40641a70" loc="38:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/Stm25pOffP.nc">
      <component-ref qname="Stm25pOffP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Toggle" scoped="" ref="0x40641a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40641c48"/>
        <function-ref name="isInput" scoped="" ref="0x40641d28"/>
        <function-ref name="toggle" scoped="" ref="0x40641e08"/>
        <function-ref name="isOutput" scoped="" ref="0x40641ee8"/>
        <function-ref name="get" scoped="" ref="0x40650010"/>
        <function-ref name="makeOutput" scoped="" ref="0x406500f0"/>
        <function-ref name="set" scoped="" ref="0x406501d0"/>
        <function-ref name="clr" scoped="" ref="0x406502b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Stm25pOff" ref="0x40641678" loc="36:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/Stm25pOffP.nc">
      <component-ref qname="Stm25pOffP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Stm25pOff" scoped="" ref="0x40641678"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40641850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x4064e010" loc="42:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <component-ref qname="HplStm25pPinsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CSN" scoped="" ref="0x4064e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4064e1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4064e2c8"/>
        <function-ref name="toggle" scoped="" ref="0x4064e3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4064e488"/>
        <function-ref name="get" scoped="" ref="0x4064e568"/>
        <function-ref name="makeOutput" scoped="" ref="0x4064e648"/>
        <function-ref name="set" scoped="" ref="0x4064e728"/>
        <function-ref name="clr" scoped="" ref="0x4064e808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Hold" ref="0x4064ea18" loc="43:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <component-ref qname="HplStm25pPinsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Hold" scoped="" ref="0x4064ea18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4064ebf0"/>
        <function-ref name="isInput" scoped="" ref="0x4064ecd0"/>
        <function-ref name="toggle" scoped="" ref="0x4064edb0"/>
        <function-ref name="isOutput" scoped="" ref="0x4064ee90"/>
        <function-ref name="get" scoped="" ref="0x4064d010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4064d0f0"/>
        <function-ref name="set" scoped="" ref="0x4064d1d0"/>
        <function-ref name="clr" scoped="" ref="0x4064d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Power" ref="0x4064d4c8" loc="45:/opt/tinyos/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <component-ref qname="HplStm25pPinsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Power" scoped="" ref="0x4064d4c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4064d6a0"/>
        <function-ref name="isInput" scoped="" ref="0x4064d780"/>
        <function-ref name="toggle" scoped="" ref="0x4064d860"/>
        <function-ref name="isOutput" scoped="" ref="0x4064d940"/>
        <function-ref name="get" scoped="" ref="0x4064da20"/>
        <function-ref name="makeOutput" scoped="" ref="0x4064db00"/>
        <function-ref name="set" scoped="" ref="0x4064dbe0"/>
        <function-ref name="clr" scoped="" ref="0x4064dcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x40655d30" loc="18:/opt/tinyos/tos/system/NoPinC.nc">
      <component-ref qname="HplStm25pPinsC.NoPinC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GeneralIO" scoped="" ref="0x40655d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40655f08"/>
        <function-ref name="isInput" scoped="" ref="0x4064b010"/>
        <function-ref name="toggle" scoped="" ref="0x4064b0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4064b1d0"/>
        <function-ref name="get" scoped="" ref="0x4064b2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4064b390"/>
        <function-ref name="set" scoped="" ref="0x4064b470"/>
        <function-ref name="clr" scoped="" ref="0x4064b550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0x4066ed30" loc="34:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x4066ed30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x4066ef08"/>
        <function-ref name="stopDone" scoped="" ref="0x4065d010"/>
        <function-ref name="start" scoped="" ref="0x4065d0f0"/>
        <function-ref name="stop" scoped="" ref="0x4065d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x4065cc80" loc="37:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x4065cc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4065ce58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="turnOff" ref="0x4066aeb8" loc="57:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="turnOff" scoped="" ref="0x4066aeb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x406690c0"/>
        <function-ref name="runTask" scoped="" ref="0x406691a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="turnOn" ref="0x4066d7c0" loc="46:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="turnOn" scoped="" ref="0x4066d7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4066d998"/>
        <function-ref name="runTask" scoped="" ref="0x4066da78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlInt" ref="0x4066bb10" loc="35:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ControlInt" scoped="" ref="0x4066bb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x4066bce8"/>
        <function-ref name="disable" scoped="" ref="0x4066bdc8"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x4066bea8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x4065c010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlPin" ref="0x4065c258" loc="36:/opt/tinyos/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ControlPin" scoped="" ref="0x4065c258"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4065c430"/>
        <function-ref name="isInput" scoped="" ref="0x4065c510"/>
        <function-ref name="toggle" scoped="" ref="0x4065c5f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4065c6d0"/>
        <function-ref name="get" scoped="" ref="0x4065c7b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4065c890"/>
        <function-ref name="set" scoped="" ref="0x4065c970"/>
        <function-ref name="clr" scoped="" ref="0x4065ca50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GpioInterrupt" ref="0x4065eb10" loc="35:/opt/tinyos/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <component-ref qname="HplSerialAutoControlC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GpioInterrupt" scoped="" ref="0x4065eb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x4065ece8"/>
        <function-ref name="disable" scoped="" ref="0x4065edc8"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x4065eea8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x40672010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x406721d0" loc="36:/opt/tinyos/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <component-ref qname="HplSerialAutoControlC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GeneralIO" scoped="" ref="0x406721d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406723a8"/>
        <function-ref name="isInput" scoped="" ref="0x40672488"/>
        <function-ref name="toggle" scoped="" ref="0x40672568"/>
        <function-ref name="isOutput" scoped="" ref="0x40672648"/>
        <function-ref name="get" scoped="" ref="0x40672728"/>
        <function-ref name="makeOutput" scoped="" ref="0x40672808"/>
        <function-ref name="set" scoped="" ref="0x406728e8"/>
        <function-ref name="clr" scoped="" ref="0x406729c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GpioInterrupt" ref="0x4066f3d0" loc="37:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaPinChange0C.nc">
      <component-ref qname="AtmegaPinChange0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GpioInterrupt" scoped="" ref="0x4066f3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x4066f5a8"/>
        <function-ref name="disable" scoped="" ref="0x4066f688"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x4066f768"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x4066f848"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtmegaPinChange" ref="0x4067b7a0" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange0C.nc">
      <component-ref qname="HplAtmegaPinChange0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtmegaPinChange" scoped="" ref="0x4067b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtmegaPinChange"/>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x4067b978"/>
        <function-ref name="fired" scoped="" ref="0x4067ba58"/>
        <function-ref name="disable" scoped="" ref="0x4067bb38"/>
        <function-ref name="isEnabled" scoped="" ref="0x4067bc18"/>
        <function-ref name="reset" scoped="" ref="0x4067bcf8"/>
        <function-ref name="setMask" scoped="" ref="0x4067bdd8"/>
        <function-ref name="enable" scoped="" ref="0x4067beb8"/>
        <function-ref name="getPins" scoped="" ref="0x4067f010"/>
        <function-ref name="getMask" scoped="" ref="0x4067f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtmegaPinChange" ref="0x406823a0" loc="51:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaPinChangeP.nc">
      <component-ref qname="AtmegaPinChange0C.AtmegaPinChangeP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtmegaPinChange" scoped="" ref="0x406823a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtmegaPinChange"/>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40682578"/>
        <function-ref name="fired" scoped="" ref="0x40682658"/>
        <function-ref name="disable" scoped="" ref="0x40682738"/>
        <function-ref name="isEnabled" scoped="" ref="0x40682818"/>
        <function-ref name="reset" scoped="" ref="0x406828f8"/>
        <function-ref name="setMask" scoped="" ref="0x406829d8"/>
        <function-ref name="enable" scoped="" ref="0x40682ab8"/>
        <function-ref name="getPins" scoped="" ref="0x40682b98"/>
        <function-ref name="getMask" scoped="" ref="0x40682c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GpioInterrupt" ref="0x40682e70" loc="52:/opt/tinyos/tos/chips/atm128rfa1/pins/AtmegaPinChangeP.nc">
      <component-ref qname="AtmegaPinChange0C.AtmegaPinChangeP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GpioInterrupt" scoped="" ref="0x40682e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x406a0070"/>
        <function-ref name="disable" scoped="" ref="0x406a0150"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x406a0230"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x406a0310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x406745a0" loc="46:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x406745a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40674778"/>
        <function-ref name="stopDone" scoped="" ref="0x40674858"/>
        <function-ref name="start" scoped="" ref="0x40674938"/>
        <function-ref name="stop" scoped="" ref="0x40674a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x4069e1b0" loc="47:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x4069e1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40648e88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4069e388"/>
        <function-ref name="getPayload" scoped="" ref="0x4069e468"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4069e548"/>
        <function-ref name="cancel" scoped="" ref="0x4069e628"/>
        <function-ref name="sendDone" scoped="" ref="0x4069e708"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x406b64d8" loc="49:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x406b64d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x406b66b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x406b6790"/>
        <function-ref name="getPayload" scoped="" ref="0x406b6870"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406b6950"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x406b6a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x406bc5a8" loc="48:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x406bc5a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40648e88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x406bc780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x406d0b78" loc="53:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x406d0b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x406d0d50"/>
        <function-ref name="led0Toggle" scoped="" ref="0x406d0e30"/>
        <function-ref name="led1On" scoped="" ref="0x406d0f10"/>
        <function-ref name="led1Toggle" scoped="" ref="0x406ab010"/>
        <function-ref name="led3Off" scoped="" ref="0x406ab0f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x406ab1d0"/>
        <function-ref name="get" scoped="" ref="0x406ab2b0"/>
        <function-ref name="led1Off" scoped="" ref="0x406ab390"/>
        <function-ref name="led3Toggle" scoped="" ref="0x406ab470"/>
        <function-ref name="led3On" scoped="" ref="0x406ab550"/>
        <function-ref name="led0On" scoped="" ref="0x406ab630"/>
        <function-ref name="led2Off" scoped="" ref="0x406ab710"/>
        <function-ref name="led2On" scoped="" ref="0x406ab7f0"/>
        <function-ref name="set" scoped="" ref="0x406ab950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x406d0640" loc="51:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x406d0640"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x406d0818"/>
        <function-ref name="noAck" scoped="" ref="0x406d08f8"/>
        <function-ref name="wasAcked" scoped="" ref="0x406d09d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x406c33b8" loc="50:/opt/tinyos/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x406c33b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x406c3590"/>
        <function-ref name="source" scoped="" ref="0x406c3670"/>
        <function-ref name="address" scoped="" ref="0x406c3750"/>
        <function-ref name="destination" scoped="" ref="0x406c3830"/>
        <function-ref name="setSource" scoped="" ref="0x406c3910"/>
        <function-ref name="setDestination" scoped="" ref="0x406c39f0"/>
        <function-ref name="type" scoped="" ref="0x406c3ad0"/>
        <function-ref name="setType" scoped="" ref="0x406c3bb0"/>
        <function-ref name="isForMe" scoped="" ref="0x406c3c90"/>
        <function-ref name="setGroup" scoped="" ref="0x406c3d70"/>
        <function-ref name="localGroup" scoped="" ref="0x406c3e50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x40704430" loc="54:/opt/tinyos/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x40704430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40704608"/>
        <function-ref name="getPayload" scoped="" ref="0x407046e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x407047c8"/>
        <function-ref name="cancel" scoped="" ref="0x407048a8"/>
        <function-ref name="sendDone" scoped="" ref="0x40704988"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x40704ae8" loc="55:/opt/tinyos/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x40704ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40704cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x406bf180" loc="47:/opt/tinyos/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x406bf180"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40648e88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406bf368"/>
        <function-ref name="getPayload" scoped="" ref="0x406bf448"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406bf528"/>
        <function-ref name="cancel" scoped="" ref="0x406bf608"/>
        <function-ref name="sendDone" scoped="" ref="0x406bf6e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x406cf850" loc="50:/opt/tinyos/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x406cf850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x406cfa28"/>
        <function-ref name="payloadLength" scoped="" ref="0x406cfb08"/>
        <function-ref name="getPayload" scoped="" ref="0x406cfbe8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406cfcc8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x406cfda8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x406bf8c0" loc="48:/opt/tinyos/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x406bf8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40648e88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x406bfaa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x406cfee8" loc="51:/opt/tinyos/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x406cfee8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x407040e0"/>
        <function-ref name="noAck" scoped="" ref="0x407041c0"/>
        <function-ref name="wasAcked" scoped="" ref="0x407042a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x406bfbe8" loc="49:/opt/tinyos/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x406bfbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x406bfdc0"/>
        <function-ref name="source" scoped="" ref="0x406bfea0"/>
        <function-ref name="address" scoped="" ref="0x406cf010"/>
        <function-ref name="destination" scoped="" ref="0x406cf0f0"/>
        <function-ref name="setSource" scoped="" ref="0x406cf1d0"/>
        <function-ref name="setDestination" scoped="" ref="0x406cf2b0"/>
        <function-ref name="type" scoped="" ref="0x406cf390"/>
        <function-ref name="setType" scoped="" ref="0x406cf470"/>
        <function-ref name="isForMe" scoped="" ref="0x406cf550"/>
        <function-ref name="setGroup" scoped="" ref="0x406cf630"/>
        <function-ref name="localGroup" scoped="" ref="0x406cf710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x406ff3a8" loc="50:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x406ff3a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x406ff580"/>
        <function-ref name="stopDone" scoped="" ref="0x406ff660"/>
        <function-ref name="start" scoped="" ref="0x406ff740"/>
        <function-ref name="stop" scoped="" ref="0x406ff820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x406fe288" loc="52:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x406fe288"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40654eb8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406fe460"/>
        <function-ref name="getPayload" scoped="" ref="0x406fe540"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406fe620"/>
        <function-ref name="cancel" scoped="" ref="0x406fe700"/>
        <function-ref name="sendDone" scoped="" ref="0x406fe7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x406ff010" loc="49:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x406ff010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406ff1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x406ffc68" loc="51:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x406ffc68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40654eb8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x406ffe40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40710e80" loc="56:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40710e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40713070"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40713150"/>
        <function-ref name="led1On" scoped="" ref="0x40713230"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40713310"/>
        <function-ref name="led3Off" scoped="" ref="0x407133f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x407134d0"/>
        <function-ref name="get" scoped="" ref="0x407135b0"/>
        <function-ref name="led1Off" scoped="" ref="0x40713690"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40713770"/>
        <function-ref name="led3On" scoped="" ref="0x40713850"/>
        <function-ref name="led0On" scoped="" ref="0x40713930"/>
        <function-ref name="led2Off" scoped="" ref="0x40713a10"/>
        <function-ref name="led2On" scoped="" ref="0x40713af0"/>
        <function-ref name="set" scoped="" ref="0x40713c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x40710978" loc="55:/opt/tinyos/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x40710978"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40654eb8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40710b50"/>
        <function-ref name="offset" scoped="" ref="0x40710c30"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40710d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40714630" loc="66:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40714630"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40714808"/>
        <function-ref name="stopDone" scoped="" ref="0x407148e8"/>
        <function-ref name="start" scoped="" ref="0x407149c8"/>
        <function-ref name="stop" scoped="" ref="0x40714aa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x4075dce8" loc="332:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x4075dce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4075dec0"/>
        <function-ref name="runTask" scoped="" ref="0x4075c010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x40733d38" loc="74:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x40733d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40733f10"/>
        <function-ref name="stop" scoped="" ref="0x40725010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x40739168" loc="191:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x40739168"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40739340"/>
        <function-ref name="runTask" scoped="" ref="0x40739420"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40714298" loc="65:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40714298"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40714470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x40725d10" loc="75:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x40725d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x40725ee8"/>
        <function-ref name="flush" scoped="" ref="0x40734010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x4075f578" loc="322:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x4075f578"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4075f750"/>
        <function-ref name="runTask" scoped="" ref="0x4075f830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x4071f468" loc="72:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x4071f468"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x4071f640"/>
        <function-ref name="resetSend" scoped="" ref="0x4071f720"/>
        <function-ref name="dataReceived" scoped="" ref="0x4071f800"/>
        <function-ref name="resetReceive" scoped="" ref="0x4071f8e0"/>
        <function-ref name="putData" scoped="" ref="0x4071f9c0"/>
        <function-ref name="putDone" scoped="" ref="0x4071faa0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x4071fb80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x4071fcf0" loc="73:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x4071fcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4071fec8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40728010"/>
        <function-ref name="led1On" scoped="" ref="0x407280f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x407281d0"/>
        <function-ref name="led3Off" scoped="" ref="0x407282b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40728390"/>
        <function-ref name="get" scoped="" ref="0x40728470"/>
        <function-ref name="led1Off" scoped="" ref="0x40728550"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40728630"/>
        <function-ref name="led3On" scoped="" ref="0x40728710"/>
        <function-ref name="led0On" scoped="" ref="0x407287f0"/>
        <function-ref name="led2Off" scoped="" ref="0x407288d0"/>
        <function-ref name="led2On" scoped="" ref="0x407289b0"/>
        <function-ref name="set" scoped="" ref="0x40728b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x4075b998" loc="341:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x4075b998"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4075bb70"/>
        <function-ref name="runTask" scoped="" ref="0x4075bc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x40726ef8" loc="67:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x40726ef8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x407290e0"/>
        <function-ref name="nextByte" scoped="" ref="0x407291c0"/>
        <function-ref name="startSend" scoped="" ref="0x407292a0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x40729380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x407222a8" loc="68:/opt/tinyos/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x407222a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x40722480"/>
        <function-ref name="byteReceived" scoped="" ref="0x40722560"/>
        <function-ref name="endPacket" scoped="" ref="0x40722640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x407d83d0" loc="275:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x407d83d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x407d85a8"/>
        <function-ref name="runTask" scoped="" ref="0x407d8688"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x4079bbc8" loc="51:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x4079bbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40654eb8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4079bdb0"/>
        <function-ref name="getPayload" scoped="" ref="0x4079be90"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x407c2010"/>
        <function-ref name="cancel" scoped="" ref="0x407c20f0"/>
        <function-ref name="sendDone" scoped="" ref="0x407c21d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x407d8808" loc="158:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x407d8808"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x407d89e0"/>
        <function-ref name="runTask" scoped="" ref="0x407d8ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x4079b808" loc="50:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x4079b808"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40654eb8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4079b9f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x407c23f8" loc="54:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x407c23f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40654eb8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x407c25e0"/>
        <function-ref name="offset" scoped="" ref="0x407c26c0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x407c27a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x407d93f0" loc="57:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x407d93f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x407d95c8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x407d96a8"/>
        <function-ref name="led1On" scoped="" ref="0x407d9788"/>
        <function-ref name="led1Toggle" scoped="" ref="0x407d9868"/>
        <function-ref name="led3Off" scoped="" ref="0x407d9948"/>
        <function-ref name="led2Toggle" scoped="" ref="0x407d9a28"/>
        <function-ref name="get" scoped="" ref="0x407d9b08"/>
        <function-ref name="led1Off" scoped="" ref="0x407d9be8"/>
        <function-ref name="led3Toggle" scoped="" ref="0x407d9cc8"/>
        <function-ref name="led3On" scoped="" ref="0x407d9da8"/>
        <function-ref name="led0On" scoped="" ref="0x407d9e88"/>
        <function-ref name="led2Off" scoped="" ref="0x407d8010"/>
        <function-ref name="led2On" scoped="" ref="0x407d80f0"/>
        <function-ref name="set" scoped="" ref="0x407d8250"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x407c2db8" loc="56:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x407c2db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x407d9010"/>
        <function-ref name="nextByte" scoped="" ref="0x407d90f0"/>
        <function-ref name="startSend" scoped="" ref="0x407d91d0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x407d92b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x407c28e0" loc="55:/opt/tinyos/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x407c28e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x407c2ab8"/>
        <function-ref name="byteReceived" scoped="" ref="0x407c2b98"/>
        <function-ref name="endPacket" scoped="" ref="0x407c2c78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x407e30f0" loc="50:/opt/tinyos/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x407e30f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x407e32c8"/>
        <function-ref name="receivedByte" scoped="" ref="0x407e33a8"/>
        <function-ref name="receive" scoped="" ref="0x407e3488"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x407e3568"/>
        <function-ref name="receiveDone" scoped="" ref="0x407e3648"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x407e3728"/>
        <function-ref name="sendDone" scoped="" ref="0x407e3808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x407d6ca0" loc="48:/opt/tinyos/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x407d6ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x407d6e78"/>
        <function-ref name="resetSend" scoped="" ref="0x407d3010"/>
        <function-ref name="dataReceived" scoped="" ref="0x407d30f0"/>
        <function-ref name="resetReceive" scoped="" ref="0x407d31d0"/>
        <function-ref name="putData" scoped="" ref="0x407d32b0"/>
        <function-ref name="putDone" scoped="" ref="0x407d3390"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x407d3470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x407e3978" loc="51:/opt/tinyos/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x407e3978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x407e3b50"/>
        <function-ref name="led0Toggle" scoped="" ref="0x407e3c30"/>
        <function-ref name="led1On" scoped="" ref="0x407e3d10"/>
        <function-ref name="led1Toggle" scoped="" ref="0x407e3df0"/>
        <function-ref name="led3Off" scoped="" ref="0x407e3ed0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x407d2010"/>
        <function-ref name="get" scoped="" ref="0x407d20f0"/>
        <function-ref name="led1Off" scoped="" ref="0x407d21d0"/>
        <function-ref name="led3Toggle" scoped="" ref="0x407d22b0"/>
        <function-ref name="led3On" scoped="" ref="0x407d2390"/>
        <function-ref name="led0On" scoped="" ref="0x407d2470"/>
        <function-ref name="led2Off" scoped="" ref="0x407d2550"/>
        <function-ref name="led2On" scoped="" ref="0x407d2630"/>
        <function-ref name="set" scoped="" ref="0x407d2790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x407ea0f0" loc="42:/opt/tinyos/tos/platforms/ucmini/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x407ea0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x407ea2c8"/>
        <function-ref name="receive" scoped="" ref="0x407ea3a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x407f02b8" loc="41:/opt/tinyos/tos/platforms/ucmini/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x407f02b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x407f0490"/>
        <function-ref name="receivedByte" scoped="" ref="0x407f0570"/>
        <function-ref name="receive" scoped="" ref="0x407f0650"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x407f0730"/>
        <function-ref name="receiveDone" scoped="" ref="0x407f0810"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x407f08f0"/>
        <function-ref name="sendDone" scoped="" ref="0x407f09d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x407d5d98" loc="40:/opt/tinyos/tos/platforms/ucmini/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x407d5d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x407f0010"/>
        <function-ref name="stop" scoped="" ref="0x407f00f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x407eb010" loc="41:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x407eb010"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x407eb1e8"/>
        <function-ref name="receive" scoped="" ref="0x407eb2c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x407eb490" loc="42:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x407eb490"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x407eb668"/>
        <function-ref name="receivedByte" scoped="" ref="0x407eb748"/>
        <function-ref name="receive" scoped="" ref="0x407eb828"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x407eb908"/>
        <function-ref name="receiveDone" scoped="" ref="0x407eb9e8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x407ebac8"/>
        <function-ref name="sendDone" scoped="" ref="0x407ebba8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x407ebf08" loc="43:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x407ebf08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40421b60"/>
            <typename><typedef-ref name="TMicro" ref="0x40421d28"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x407e9680"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407e9b70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407e98f8"/>
        <function-ref name="overflow" scoped="" ref="0x407e9de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x407eaaf8" loc="40:/opt/tinyos/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x407eaaf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x407eacd0"/>
        <function-ref name="stop" scoped="" ref="0x407eadb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x407e77b0" loc="50:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x407e77b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x407e7988"/>
        <function-ref name="receive" scoped="" ref="0x407e7a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x40800510" loc="53:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x40800510"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x408006e8"/>
        <function-ref name="stop" scoped="" ref="0x408007c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x407e7060" loc="48:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x407e7060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x407e7238"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x407e7bc8" loc="51:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x407e7bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x407e7da0"/>
        <function-ref name="receivedByte" scoped="" ref="0x407e7e80"/>
        <function-ref name="receive" scoped="" ref="0x40800010"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x408000f0"/>
        <function-ref name="receiveDone" scoped="" ref="0x408001d0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x408002b0"/>
        <function-ref name="sendDone" scoped="" ref="0x40800390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40827a70" loc="56:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40827a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40421b60"/>
            <typename><typedef-ref name="TMicro" ref="0x40421d28"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40826200"/>
        <function-ref name="clearOverflow" scoped="" ref="0x408266f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40826478"/>
        <function-ref name="overflow" scoped="" ref="0x40826968"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x40800d80" loc="55:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x40800d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40827010"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x408270f0"/>
        <function-ref name="rxDone" scoped="" ref="0x408271d0"/>
        <function-ref name="txDone" scoped="" ref="0x408272b0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40827390"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40827470"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40827550"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40827630"/>
        <function-ref name="tx" scoped="" ref="0x40827710"/>
        <function-ref name="rx" scoped="" ref="0x408277f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x407e7398" loc="49:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x407e7398"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x407e7570"/>
        <function-ref name="stop" scoped="" ref="0x407e7650"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x40800948" loc="54:/opt/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x40800948"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40800b20"/>
        <function-ref name="stop" scoped="" ref="0x40800c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x4082d088" loc="49:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x4082d088"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x4082d260"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x4082d340"/>
        <function-ref name="rxDone" scoped="" ref="0x4082d420"/>
        <function-ref name="txDone" scoped="" ref="0x4082d500"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x4082d5e0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x4082d6c0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x4082d7a0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x4082d880"/>
        <function-ref name="tx" scoped="" ref="0x4082d960"/>
        <function-ref name="rx" scoped="" ref="0x4082da40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x4082c760" loc="53:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x4082c760"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x4082c938"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x4082ca18"/>
        <function-ref name="rxDone" scoped="" ref="0x4082caf8"/>
        <function-ref name="txDone" scoped="" ref="0x4082cbd8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x4082ccb8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x4082cd98"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x4082ce78"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x4082b010"/>
        <function-ref name="tx" scoped="" ref="0x4082b0f0"/>
        <function-ref name="rx" scoped="" ref="0x4082b1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x4082eb50" loc="48:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x4082eb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x4082ed28"/>
        <function-ref name="stop" scoped="" ref="0x4082ee08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x4082dc98" loc="51:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x4082dc98"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x4082de70"/>
        <function-ref name="stop" scoped="" ref="0x4082c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x4082c268" loc="52:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x4082c268"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x4082c440"/>
        <function-ref name="stop" scoped="" ref="0x4082c520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x4082e640" loc="47:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x4082e640"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x4082e818"/>
        <function-ref name="stop" scoped="" ref="0x4082e8f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x4082b9f8" loc="114:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x4082b9f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4082bbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x408288c0" loc="117:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x408288c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40828a98"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40828b78"/>
        <function-ref name="rxDone" scoped="" ref="0x40828c58"/>
        <function-ref name="txDone" scoped="" ref="0x40828d38"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40828e18"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40828ef8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40841010"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x408410f0"/>
        <function-ref name="tx" scoped="" ref="0x408411d0"/>
        <function-ref name="rx" scoped="" ref="0x408412b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x4083f010" loc="124:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x4083f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x4083f1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x408414c0" loc="119:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x408414c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40841698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x40840390" loc="122:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x40840390"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40840568"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40840648"/>
        <function-ref name="rxDone" scoped="" ref="0x40840728"/>
        <function-ref name="txDone" scoped="" ref="0x40840808"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x408408e8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x408409c8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40840aa8"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40840b88"/>
        <function-ref name="tx" scoped="" ref="0x40840c68"/>
        <function-ref name="rx" scoped="" ref="0x40840d48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x408283a8" loc="116:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x408283a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40828580"/>
        <function-ref name="stop" scoped="" ref="0x40828660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x40841910" loc="120:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x40841910"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40841ae8"/>
        <function-ref name="stop" scoped="" ref="0x40841bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x40841e40" loc="121:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x40841e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40840050"/>
        <function-ref name="stop" scoped="" ref="0x40840130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x4083f3e0" loc="126:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x4083f3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x4083f5b8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x4083f698"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x4083f778"/>
        <function-ref name="actualMicro" scoped="" ref="0x4083f858"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x4083f938"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x4083fb20" loc="127:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x4083fb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x4083fcf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x4082be48" loc="115:/opt/tinyos/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x4082be48"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40828050"/>
        <function-ref name="stop" scoped="" ref="0x40828130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x408706a8" loc="58:/opt/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x408706a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40870880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x408702a0" loc="57:/opt/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x408702a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40870478"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x4086e0e0" loc="60:/opt/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x4086e0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4086e2b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x4086f338" loc="57:/opt/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x4086f338"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x4086f510"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x4086fc98" loc="59:/opt/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x4086fc98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4086fe70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x4086f6d0" loc="58:/opt/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x4086f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4086f8a8"/>
        <function-ref name="taskLoop" scoped="" ref="0x4086f988"/>
        <function-ref name="runNextTask" scoped="" ref="0x4086fa68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x4038a330" loc="48:/opt/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x4038a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4038a508"/>
        <function-ref name="runTask" scoped="" ref="0x4038a5e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x4032fb58" loc="47:/opt/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x4032fb58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4032fd30"/>
        <function-ref name="taskLoop" scoped="" ref="0x4032fe10"/>
        <function-ref name="runNextTask" scoped="" ref="0x4032fef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x403f8010" loc="56:/opt/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x403f8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x403f81e8"/>
        <function-ref name="runTask" scoped="" ref="0x403f82c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x403f8c68" loc="57:/opt/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x403f8c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x403f8e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x403f9738" loc="55:/opt/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x403f9738"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x403f9910"/>
        <function-ref name="taskLoop" scoped="" ref="0x403f99f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x403f9ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40881170" loc="41:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40881170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40421b60"/>
            <typename><typedef-ref name="TMicro" ref="0x40421d28"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x408818c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40881db0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40881b38"/>
        <function-ref name="overflow" scoped="" ref="0x4087f048"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x4087dae8" loc="63:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x4087dae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4087b308"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4087b7f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4087b580"/>
        <function-ref name="overflow" scoped="" ref="0x4087ba70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x4087e7f0" loc="62:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x4087e7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40421b60"/>
            <typename><typedef-ref name="TMicro" ref="0x40421d28"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4087d010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4087d500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4087d288"/>
        <function-ref name="overflow" scoped="" ref="0x4087d778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x4087a888" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMcu32C.nc">
      <component-ref qname="CounterMcu32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x4087a888"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40893010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40893500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40893288"/>
        <function-ref name="overflow" scoped="" ref="0x40893778"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x4088f078" loc="63:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMcu32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x4088f078"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4088f7c8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4088fcb8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4088fa40"/>
        <function-ref name="overflow" scoped="" ref="0x4088e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40892dd8" loc="62:/opt/tinyos/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMcu32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40892dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40890570"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40890a60"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408907e8"/>
        <function-ref name="overflow" scoped="" ref="0x40890cd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x4088b128" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <component-ref qname="CounterMcu16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x4088b128"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4088b878"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4088bd68"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4088baf0"/>
        <function-ref name="overflow" scoped="" ref="0x40889010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408882c0" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="CounterMcu16C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408882c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403287d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403287d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40888498"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x408886f8" loc="40:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="CounterMcu16C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x408886f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x40444f18"/>
            <typename><typedef-ref name="TMcu" ref="0x404432d8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40888e48"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40887350"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408870d8"/>
        <function-ref name="overflow" scoped="" ref="0x408875c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCounter" ref="0x40887898" loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="CounterMcu16C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCounter" scoped="" ref="0x40887898"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x408a0300"/>
        <function-ref name="test" scoped="" ref="0x408a1688"/>
        <function-ref name="get" scoped="" ref="0x40887ee0"/>
        <function-ref name="reset" scoped="" ref="0x408a1900"/>
        <function-ref name="getMode" scoped="" ref="0x408a05a0"/>
        <function-ref name="overflow" scoped="" ref="0x408a1410"/>
        <function-ref name="isOn" scoped="" ref="0x408a0088"/>
        <function-ref name="set" scoped="" ref="0x408a1170"/>
        <function-ref name="start" scoped="" ref="0x408a1b78"/>
        <function-ref name="stop" scoped="" ref="0x408a1df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x408973f8" loc="41:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <component-ref qname="HplAtmRfa1Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x408973f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCapture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x40895ee0"/>
        <function-ref name="test" scoped="" ref="0x40895288"/>
        <function-ref name="fired" scoped="" ref="0x40895010"/>
        <function-ref name="get" scoped="" ref="0x40897a40"/>
        <function-ref name="reset" scoped="" ref="0x40895500"/>
        <function-ref name="getMode" scoped="" ref="0x408941c0"/>
        <function-ref name="isOn" scoped="" ref="0x40895c68"/>
        <function-ref name="set" scoped="" ref="0x40897cb8"/>
        <function-ref name="start" scoped="" ref="0x40895778"/>
        <function-ref name="stop" scoped="" ref="0x408959f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x4089faf0" loc="39:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <component-ref qname="HplAtmRfa1Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x4089faf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x4089a600"/>
        <function-ref name="test" scoped="" ref="0x4089c990"/>
        <function-ref name="get" scoped="" ref="0x4089c200"/>
        <function-ref name="reset" scoped="" ref="0x4089cc08"/>
        <function-ref name="getMode" scoped="" ref="0x4089a8a0"/>
        <function-ref name="overflow" scoped="" ref="0x4089c718"/>
        <function-ref name="isOn" scoped="" ref="0x4089a388"/>
        <function-ref name="set" scoped="" ref="0x4089c478"/>
        <function-ref name="start" scoped="" ref="0x4089ce80"/>
        <function-ref name="stop" scoped="" ref="0x4089a110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40899010" loc="40:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <component-ref qname="HplAtmRfa1Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40899010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x40898a68"/>
        <function-ref name="test" scoped="" ref="0x40899de8"/>
        <function-ref name="fired" scoped="" ref="0x40899b70"/>
        <function-ref name="force" scoped="" ref="0x40897010"/>
        <function-ref name="get" scoped="" ref="0x40899658"/>
        <function-ref name="reset" scoped="" ref="0x40898088"/>
        <function-ref name="getMode" scoped="" ref="0x40898d08"/>
        <function-ref name="isOn" scoped="" ref="0x408987f0"/>
        <function-ref name="set" scoped="" ref="0x408998d0"/>
        <function-ref name="start" scoped="" ref="0x40898300"/>
        <function-ref name="stop" scoped="" ref="0x40898578"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x408abe10" loc="42:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x408abe10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x408a9878"/>
        <function-ref name="test" scoped="" ref="0x408aabf8"/>
        <function-ref name="fired" scoped="" ref="0x408aa980"/>
        <function-ref name="force" scoped="" ref="0x408a9d90"/>
        <function-ref name="get" scoped="" ref="0x408aa468"/>
        <function-ref name="reset" scoped="" ref="0x408aae70"/>
        <function-ref name="getMode" scoped="" ref="0x408a9b18"/>
        <function-ref name="isOn" scoped="" ref="0x408a9600"/>
        <function-ref name="set" scoped="" ref="0x408aa6e0"/>
        <function-ref name="start" scoped="" ref="0x408a9110"/>
        <function-ref name="stop" scoped="" ref="0x408a9388"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x408a2910" loc="45:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x408a2910"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCapture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x408bb418"/>
        <function-ref name="test" scoped="" ref="0x408bd7a0"/>
        <function-ref name="fired" scoped="" ref="0x408bd528"/>
        <function-ref name="get" scoped="" ref="0x408bd010"/>
        <function-ref name="reset" scoped="" ref="0x408bda18"/>
        <function-ref name="getMode" scoped="" ref="0x408bb6b8"/>
        <function-ref name="isOn" scoped="" ref="0x408bb1a0"/>
        <function-ref name="set" scoped="" ref="0x408bd288"/>
        <function-ref name="start" scoped="" ref="0x408bdc90"/>
        <function-ref name="stop" scoped="" ref="0x408bdf08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x408bb970" loc="46:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x408bb970"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x408bbb48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x408a71a0" loc="43:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x408a71a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x408a6c68"/>
        <function-ref name="test" scoped="" ref="0x408a6010"/>
        <function-ref name="fired" scoped="" ref="0x408a7d00"/>
        <function-ref name="force" scoped="" ref="0x408a51a0"/>
        <function-ref name="get" scoped="" ref="0x408a77e8"/>
        <function-ref name="reset" scoped="" ref="0x408a6288"/>
        <function-ref name="getMode" scoped="" ref="0x408a6f08"/>
        <function-ref name="isOn" scoped="" ref="0x408a69f0"/>
        <function-ref name="set" scoped="" ref="0x408a7a60"/>
        <function-ref name="start" scoped="" ref="0x408a6500"/>
        <function-ref name="stop" scoped="" ref="0x408a6778"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x408bbd60" loc="51:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x408bbd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x408ba010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x408a5598" loc="44:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x408a5598"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x408a2010"/>
        <function-ref name="test" scoped="" ref="0x408a33a8"/>
        <function-ref name="fired" scoped="" ref="0x408a3130"/>
        <function-ref name="force" scoped="" ref="0x408a2528"/>
        <function-ref name="get" scoped="" ref="0x408a5be0"/>
        <function-ref name="reset" scoped="" ref="0x408a3620"/>
        <function-ref name="getMode" scoped="" ref="0x408a22b0"/>
        <function-ref name="isOn" scoped="" ref="0x408a3d88"/>
        <function-ref name="set" scoped="" ref="0x408a5e58"/>
        <function-ref name="start" scoped="" ref="0x408a3898"/>
        <function-ref name="stop" scoped="" ref="0x408a3b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40894d18" loc="41:/opt/tinyos/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40894d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x408ab778"/>
        <function-ref name="test" scoped="" ref="0x408adb00"/>
        <function-ref name="get" scoped="" ref="0x408ad370"/>
        <function-ref name="reset" scoped="" ref="0x408add78"/>
        <function-ref name="getMode" scoped="" ref="0x408aba18"/>
        <function-ref name="overflow" scoped="" ref="0x408ad888"/>
        <function-ref name="isOn" scoped="" ref="0x408ab500"/>
        <function-ref name="set" scoped="" ref="0x408ad5e8"/>
        <function-ref name="start" scoped="" ref="0x408ab010"/>
        <function-ref name="stop" scoped="" ref="0x408ab288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x40879e58" loc="47:/opt/tinyos/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x40879e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40902050"/>
        <function-ref name="offset" scoped="" ref="0x40902130"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40902210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x40915440" loc="43:/opt/tinyos/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40915440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40915618"/>
        <function-ref name="getPayload" scoped="" ref="0x409156f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x409157d8"/>
        <function-ref name="cancel" scoped="" ref="0x409158b8"/>
        <function-ref name="sendDone" scoped="" ref="0x40915998"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x40915b20" loc="44:/opt/tinyos/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40915b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40915cf8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40915e68" loc="45:/opt/tinyos/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40915e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40914050"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40914130"/>
        <function-ref name="led1On" scoped="" ref="0x40914210"/>
        <function-ref name="led1Toggle" scoped="" ref="0x409142f0"/>
        <function-ref name="led3Off" scoped="" ref="0x409143d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x409144b0"/>
        <function-ref name="get" scoped="" ref="0x40914590"/>
        <function-ref name="led1Off" scoped="" ref="0x40914670"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40914750"/>
        <function-ref name="led3On" scoped="" ref="0x40914830"/>
        <function-ref name="led0On" scoped="" ref="0x40914910"/>
        <function-ref name="led2Off" scoped="" ref="0x409149f0"/>
        <function-ref name="led2On" scoped="" ref="0x40914ad0"/>
        <function-ref name="set" scoped="" ref="0x40914c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendAck" ref="0x40913608" loc="54:/opt/tinyos/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendAck" scoped="" ref="0x40913608"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x409137e0"/>
        <function-ref name="runTask" scoped="" ref="0x409138c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialPacketInfo" ref="0x4064aea8" loc="38:/opt/tinyos/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x4064aea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x409150c0"/>
        <function-ref name="offset" scoped="" ref="0x409151a0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40915280"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Humidity" ref="0x40923d48" loc="7:/opt/tinyos/tos/platforms/ucmini/chips/sht21/SensirionSht11C.nc">
      <component-ref qname="TH20SensorC.Sht7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Humidity" scoped="" ref="0x40923d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40ad43c0"/>
        <function-ref name="readDone" scoped="" ref="0x40ad4618"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Temperature" ref="0x40923120" loc="5:/opt/tinyos/tos/platforms/ucmini/chips/sht21/SensirionSht11C.nc">
      <component-ref qname="TH20SensorC.Sht7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Temperature" scoped="" ref="0x40923120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40923748"/>
        <function-ref name="readDone" scoped="" ref="0x409239a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40bd6428" loc="37:/opt/tinyos/tos/platforms/ucmini/chips/sht21/TemperatureC.nc">
      <component-ref qname="TH20SensorC.Sht7.TemperatureC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40bd6428"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40bd6a50"/>
        <function-ref name="readDone" scoped="" ref="0x40bd6ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40bd23e0" loc="39:/opt/tinyos/tos/chips/sht21/Sht21RawTemperatureC.nc">
      <component-ref qname="TH20SensorC.Sht7.TemperatureC.Sht21RawTemperatureC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40bd23e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40bd2a08"/>
        <function-ref name="readDone" scoped="" ref="0x40bd2c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadHumidity" ref="0x40932680" loc="39:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <component-ref qname="Sht21ArbitratedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadHumidity" scoped="" ref="0x40932680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40932ca8"/>
        <function-ref name="readDone" scoped="" ref="0x40932f00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadTemperature" ref="0x40916620" loc="38:/opt/tinyos/tos/chips/sht21/Sht21ArbitratedC.nc">
      <component-ref qname="Sht21ArbitratedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadTemperature" scoped="" ref="0x40916620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40916c48"/>
        <function-ref name="readDone" scoped="" ref="0x40916ea0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Humidity" ref="0x4092e4d0" loc="37:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <component-ref qname="Sht21C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Humidity" scoped="" ref="0x4092e4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4092eaf8"/>
        <function-ref name="readDone" scoped="" ref="0x4092ed50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Temperature" ref="0x409317b8" loc="36:/opt/tinyos/tos/chips/sht21/Sht21C.nc">
      <component-ref qname="Sht21C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Temperature" scoped="" ref="0x409317b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40931de0"/>
        <function-ref name="readDone" scoped="" ref="0x4092e048"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalReadDone" ref="0x4095feb8" loc="153:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <component-ref qname="Sht21P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalReadDone" scoped="" ref="0x4095feb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4095e0c0"/>
        <function-ref name="runTask" scoped="" ref="0x4095e1a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startTimer" ref="0x409583b0" loc="192:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <component-ref qname="Sht21P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startTimer" scoped="" ref="0x409583b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40958588"/>
        <function-ref name="runTask" scoped="" ref="0x40958668"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusPowerManager" ref="0x40951868" loc="43:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <component-ref qname="Sht21P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusPowerManager" scoped="" ref="0x40951868"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusPowerManager"/>
      </instance>
      <interface-functions>
        <function-ref name="powerOn" scoped="" ref="0x40951a40"/>
        <function-ref name="requestPower" scoped="" ref="0x40951b20"/>
        <function-ref name="powerOff" scoped="" ref="0x40951c00"/>
        <function-ref name="configure" scoped="" ref="0x40951ce0"/>
        <function-ref name="releasePower" scoped="" ref="0x40951dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Humidity" ref="0x40929330" loc="38:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <component-ref qname="Sht21P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Humidity" scoped="" ref="0x40929330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40929958"/>
        <function-ref name="readDone" scoped="" ref="0x40929bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40939010" loc="44:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <component-ref qname="Sht21P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40939010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x409391e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="I2CResource" ref="0x40935230" loc="42:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <component-ref qname="Sht21P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2CResource" scoped="" ref="0x40935230"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40935408"/>
        <function-ref name="immediateRequest" scoped="" ref="0x409354e8"/>
        <function-ref name="request" scoped="" ref="0x409355c8"/>
        <function-ref name="granted" scoped="" ref="0x409356a8"/>
        <function-ref name="isOwner" scoped="" ref="0x40935788"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Temperature" ref="0x4092d608" loc="37:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <component-ref qname="Sht21P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Temperature" scoped="" ref="0x4092d608"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4092dc30"/>
        <function-ref name="readDone" scoped="" ref="0x4092de88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="I2CPacket" ref="0x4093ee18" loc="40:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <component-ref qname="Sht21P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2CPacket" scoped="" ref="0x4093ee18"/></type-interface>
      <instance>
        <interfacedef-ref qname="I2CPacket"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x40928540"/>
            <typename><typedef-ref name="TI2CBasicAddr" ref="0x409286a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40927488"/>
        <function-ref name="writeDone" scoped="" ref="0x40926748"/>
        <function-ref name="write" scoped="" ref="0x40927aa8"/>
        <function-ref name="readDone" scoped="" ref="0x40926128"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40926e28" loc="41:/opt/tinyos/tos/chips/sht21/Sht21P.nc">
      <component-ref qname="Sht21P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40926e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4093b920"/>
        <function-ref name="fired" scoped="" ref="0x4093cbc0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4093b2e0"/>
        <function-ref name="isOneShot" scoped="" ref="0x4093b088"/>
        <function-ref name="getdt" scoped="" ref="0x4093bdd0"/>
        <function-ref name="gett0" scoped="" ref="0x4093bb78"/>
        <function-ref name="isRunning" scoped="" ref="0x4093ce18"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4093c468"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4093b600"/>
        <function-ref name="startOneShot" scoped="" ref="0x4093c6e8"/>
        <function-ref name="stop" scoped="" ref="0x4093c968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4096d5a8" loc="45:/opt/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="Sht21C.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4096d5a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4096b0d8"/>
        <function-ref name="fired" scoped="" ref="0x4096c368"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4096ca70"/>
        <function-ref name="isOneShot" scoped="" ref="0x4096c818"/>
        <function-ref name="getdt" scoped="" ref="0x4096b588"/>
        <function-ref name="gett0" scoped="" ref="0x4096b330"/>
        <function-ref name="isRunning" scoped="" ref="0x4096c5c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4096dbd0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4096cd90"/>
        <function-ref name="startOneShot" scoped="" ref="0x4096de50"/>
        <function-ref name="stop" scoped="" ref="0x4096c110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusPowerManager" ref="0x40964208" loc="38:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HplSht21C.nc">
      <component-ref qname="HplSht21C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusPowerManager" scoped="" ref="0x40964208"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusPowerManager"/>
      </instance>
      <interface-functions>
        <function-ref name="powerOn" scoped="" ref="0x409643e0"/>
        <function-ref name="requestPower" scoped="" ref="0x409644c0"/>
        <function-ref name="powerOff" scoped="" ref="0x409645a0"/>
        <function-ref name="configure" scoped="" ref="0x40964680"/>
        <function-ref name="releasePower" scoped="" ref="0x40964760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x409659d8" loc="37:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HplSht21C.nc">
      <component-ref qname="HplSht21C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x409659d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40965bb0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40965c90"/>
        <function-ref name="request" scoped="" ref="0x40965d70"/>
        <function-ref name="granted" scoped="" ref="0x40965e50"/>
        <function-ref name="isOwner" scoped="" ref="0x40964010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CPacket" ref="0x4096aaa8" loc="36:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HplSht21C.nc">
      <component-ref qname="HplSht21C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2CPacket" scoped="" ref="0x4096aaa8"/></type-interface>
      <instance>
        <interfacedef-ref qname="I2CPacket"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x40928540"/>
            <typename><typedef-ref name="TI2CBasicAddr" ref="0x409286a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40967120"/>
        <function-ref name="writeDone" scoped="" ref="0x409653a8"/>
        <function-ref name="write" scoped="" ref="0x40967740"/>
        <function-ref name="readDone" scoped="" ref="0x40967d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40963718" loc="44:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterC.nc">
      <component-ref qname="HplSht21C.I2CBus"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40963718"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x409638f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x409639d0"/>
        <function-ref name="request" scoped="" ref="0x40963ab0"/>
        <function-ref name="granted" scoped="" ref="0x40963b90"/>
        <function-ref name="isOwner" scoped="" ref="0x40963c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CPacket" ref="0x40963e60" loc="45:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterC.nc">
      <component-ref qname="HplSht21C.I2CBus"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2CPacket" scoped="" ref="0x40963e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="I2CPacket"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x40928540"/>
            <typename><typedef-ref name="TI2CBasicAddr" ref="0x409286a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x409624d8"/>
        <function-ref name="writeDone" scoped="" ref="0x40a72778"/>
        <function-ref name="write" scoped="" ref="0x40962af8"/>
        <function-ref name="readDone" scoped="" ref="0x40a72158"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x4097b8d8" loc="45:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <component-ref qname="Atm128I2CMasterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x4097b8d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4097bab0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x4097bb90"/>
        <function-ref name="request" scoped="" ref="0x4097bc70"/>
        <function-ref name="granted" scoped="" ref="0x4097bd50"/>
        <function-ref name="isOwner" scoped="" ref="0x4097be30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CPacket" ref="0x40977460" loc="46:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterP.nc">
      <component-ref qname="Atm128I2CMasterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2CPacket" scoped="" ref="0x40977460"/></type-interface>
      <instance>
        <interfacedef-ref qname="I2CPacket"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x40928540"/>
            <typename><typedef-ref name="TI2CBasicAddr" ref="0x409286a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40977aa8"/>
        <function-ref name="writeDone" scoped="" ref="0x40976d68"/>
        <function-ref name="write" scoped="" ref="0x40976128"/>
        <function-ref name="readDone" scoped="" ref="0x40976748"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40972488" loc="92:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40972488"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40972670"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40972750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x409cc3e8" loc="96:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x409cc3e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x409cc5d0"/>
        <function-ref name="configure" scoped="" ref="0x409cc6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40972890" loc="93:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40972890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40972a68"/>
        <function-ref name="requested" scoped="" ref="0x40972b48"/>
        <function-ref name="granted" scoped="" ref="0x40972c28"/>
        <function-ref name="isOwner" scoped="" ref="0x40972d08"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40972de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40973ce8" loc="91:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40973ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40973ed0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40972010"/>
        <function-ref name="request" scoped="" ref="0x409720f0"/>
        <function-ref name="granted" scoped="" ref="0x409721d0"/>
        <function-ref name="isOwner" scoped="" ref="0x409722b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40972f28" loc="94:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40972f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x409cc110"/>
        <function-ref name="userId" scoped="" ref="0x409cc1f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40bf0200" loc="44:/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40bf0200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40bf03d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x40bf0538" loc="45:/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x40bf0538"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40bf0710"/>
        <function-ref name="isEmpty" scoped="" ref="0x40bf07f0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40bf08d0"/>
        <function-ref name="dequeue" scoped="" ref="0x40bf09b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40befe28" loc="55:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40befe28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40bee050"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40bee130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40beedc8" loc="60:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40beedc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40bec010"/>
        <function-ref name="configure" scoped="" ref="0x40bec0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40bec250" loc="61:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40bec250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40bec428"/>
        <function-ref name="isEmpty" scoped="" ref="0x40bec508"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40bec5e8"/>
        <function-ref name="dequeue" scoped="" ref="0x40bec6c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40bee270" loc="56:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40bee270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40bee448"/>
        <function-ref name="requested" scoped="" ref="0x40bee528"/>
        <function-ref name="granted" scoped="" ref="0x40bee608"/>
        <function-ref name="isOwner" scoped="" ref="0x40bee6e8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40bee7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40bec808" loc="62:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40bec808"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40bec9e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40becac0"/>
        <function-ref name="led1On" scoped="" ref="0x40becba0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40becc80"/>
        <function-ref name="led3Off" scoped="" ref="0x40becd60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40bece40"/>
        <function-ref name="get" scoped="" ref="0x40becf20"/>
        <function-ref name="led1Off" scoped="" ref="0x40beb018"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40beb0f8"/>
        <function-ref name="led3On" scoped="" ref="0x40beb1d8"/>
        <function-ref name="led0On" scoped="" ref="0x40beb2b8"/>
        <function-ref name="led2Off" scoped="" ref="0x40beb398"/>
        <function-ref name="led2On" scoped="" ref="0x40beb478"/>
        <function-ref name="set" scoped="" ref="0x40beb5d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40bef6e8" loc="54:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40bef6e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40bef8d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40bef9b0"/>
        <function-ref name="request" scoped="" ref="0x40befa90"/>
        <function-ref name="granted" scoped="" ref="0x40befb70"/>
        <function-ref name="isOwner" scoped="" ref="0x40befc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40bee908" loc="57:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40bee908"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40beeae0"/>
        <function-ref name="userId" scoped="" ref="0x40beebc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x40beb758" loc="75:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128I2CMasterP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x40beb758"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40beb930"/>
        <function-ref name="runTask" scoped="" ref="0x40beba10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x409c9a08" loc="62:/opt/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128I2CMasterP.Power"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x409c9a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x409c9be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x409c9d20" loc="63:/opt/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128I2CMasterP.Power"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x409c9d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x409c9ef8"/>
        <function-ref name="requested" scoped="" ref="0x409c8010"/>
        <function-ref name="granted" scoped="" ref="0x409c80f0"/>
        <function-ref name="isOwner" scoped="" ref="0x409c81d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x409c82b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x409c9610" loc="60:/opt/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128I2CMasterP.Power"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x409c9610"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x409c97e8"/>
        <function-ref name="stop" scoped="" ref="0x409c98c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x409c83f0" loc="64:/opt/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128I2CMasterP.Power"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x409c83f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x409c85c8"/>
        <function-ref name="userId" scoped="" ref="0x409c86a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128I2C" ref="0x409fe640" loc="45:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc">
      <component-ref qname="Atm128I2CMasterP.I2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128I2C" scoped="" ref="0x409fe640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="stop" scoped="" ref="0x409fe818"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x40a01788" loc="44:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc">
      <component-ref qname="Atm128I2CMasterP.I2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x40a01788"/></type-interface>
      <instance>
        <interfacedef-ref qname="I2CPacket"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x40928540"/>
            <typename><typedef-ref name="TI2CBasicAddr" ref="0x409286a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40a01dd0"/>
        <function-ref name="writeDone" scoped="" ref="0x409fe068"/>
        <function-ref name="write" scoped="" ref="0x40a00400"/>
        <function-ref name="readDone" scoped="" ref="0x40a00a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x409fe978" loc="46:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc">
      <component-ref qname="Atm128I2CMasterP.I2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x409fe978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x409feb50"/>
        <function-ref name="led0Toggle" scoped="" ref="0x409fec30"/>
        <function-ref name="led1On" scoped="" ref="0x409fed10"/>
        <function-ref name="led1Toggle" scoped="" ref="0x409fedf0"/>
        <function-ref name="led3Off" scoped="" ref="0x409feed0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x409fd010"/>
        <function-ref name="get" scoped="" ref="0x409fd0f0"/>
        <function-ref name="led1Off" scoped="" ref="0x409fd1d0"/>
        <function-ref name="led3Toggle" scoped="" ref="0x409fd2b0"/>
        <function-ref name="led3On" scoped="" ref="0x409fd390"/>
        <function-ref name="led0On" scoped="" ref="0x409fd470"/>
        <function-ref name="led2Off" scoped="" ref="0x409fd550"/>
        <function-ref name="led2On" scoped="" ref="0x409fd630"/>
        <function-ref name="set" scoped="" ref="0x409fd790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x409df7d0" loc="41:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc">
      <component-ref qname="Atm128I2CMasterP.I2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x409df7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x409df9b8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x409dfa98"/>
        <function-ref name="request" scoped="" ref="0x409dfb78"/>
        <function-ref name="granted" scoped="" ref="0x409dfc58"/>
        <function-ref name="isOwner" scoped="" ref="0x409dfd38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CPacket" ref="0x409e1010" loc="42:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc">
      <component-ref qname="Atm128I2CMasterP.I2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2CPacket" scoped="" ref="0x409e1010"/></type-interface>
      <instance>
        <interfacedef-ref qname="I2CPacket"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x40928540"/>
            <typename><typedef-ref name="TI2CBasicAddr" ref="0x409286a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x409e1668"/>
        <function-ref name="writeDone" scoped="" ref="0x40a02910"/>
        <function-ref name="write" scoped="" ref="0x409e1c98"/>
        <function-ref name="readDone" scoped="" ref="0x40a022e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubResource" ref="0x40a01010" loc="43:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterImplP.nc">
      <component-ref qname="Atm128I2CMasterP.I2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubResource" scoped="" ref="0x40a01010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40a011f8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40a012d8"/>
        <function-ref name="request" scoped="" ref="0x40a013b8"/>
        <function-ref name="granted" scoped="" ref="0x40a01498"/>
        <function-ref name="isOwner" scoped="" ref="0x40a01578"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128I2C" ref="0x40a25240" loc="79:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc">
      <component-ref qname="Atm128I2CMasterP.Master"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128I2C" scoped="" ref="0x40a25240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="stop" scoped="" ref="0x40a25418"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="I2C" ref="0x40a25598" loc="81:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc">
      <component-ref qname="Atm128I2CMasterP.Master"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2C" scoped="" ref="0x40a25598"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128I2CBus"/>
      </instance>
      <interface-functions>
        <function-ref name="readCurrent" scoped="" ref="0x40a25770"/>
        <function-ref name="sendCommand" scoped="" ref="0x40a25850"/>
        <function-ref name="setStart" scoped="" ref="0x40a25930"/>
        <function-ref name="status" scoped="" ref="0x40a25a10"/>
        <function-ref name="hasAcks" scoped="" ref="0x40a25af0"/>
        <function-ref name="isEnabled" scoped="" ref="0x40a25bd0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x40a25cb0"/>
        <function-ref name="read" scoped="" ref="0x40a25d90"/>
        <function-ref name="init" scoped="" ref="0x40a25e70"/>
        <function-ref name="enableAck" scoped="" ref="0x40a46010"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x40a460f0"/>
        <function-ref name="hasStart" scoped="" ref="0x40a461d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40a462b0"/>
        <function-ref name="commandComplete" scoped="" ref="0x40a46410"/>
        <function-ref name="enable" scoped="" ref="0x40a464f0"/>
        <function-ref name="write" scoped="" ref="0x40a465d0"/>
        <function-ref name="isRealInterruptPending" scoped="" ref="0x40a466b0"/>
        <function-ref name="off" scoped="" ref="0x40a46790"/>
        <function-ref name="setStop" scoped="" ref="0x40a46870"/>
        <function-ref name="setInterruptPending" scoped="" ref="0x40a46950"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x40a46a30"/>
        <function-ref name="hasStop" scoped="" ref="0x40a46b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadDebugLeds" ref="0x40a46c90" loc="82:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc">
      <component-ref qname="Atm128I2CMasterP.Master"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadDebugLeds" scoped="" ref="0x40a46c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40a46e68"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40a45010"/>
        <function-ref name="led1On" scoped="" ref="0x40a450f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40a451d0"/>
        <function-ref name="led3Off" scoped="" ref="0x40a452b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40a45390"/>
        <function-ref name="get" scoped="" ref="0x40a45470"/>
        <function-ref name="led1Off" scoped="" ref="0x40a45550"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40a45630"/>
        <function-ref name="led3On" scoped="" ref="0x40a45710"/>
        <function-ref name="led0On" scoped="" ref="0x40a457f0"/>
        <function-ref name="led2Off" scoped="" ref="0x40a458d0"/>
        <function-ref name="led2On" scoped="" ref="0x40a459b0"/>
        <function-ref name="set" scoped="" ref="0x40a45b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WriteDebugLeds" ref="0x40a45c90" loc="83:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc">
      <component-ref qname="Atm128I2CMasterP.Master"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="WriteDebugLeds" scoped="" ref="0x40a45c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40a45e68"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40a44010"/>
        <function-ref name="led1On" scoped="" ref="0x40a440f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40a441d0"/>
        <function-ref name="led3Off" scoped="" ref="0x40a442b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40a44390"/>
        <function-ref name="get" scoped="" ref="0x40a44470"/>
        <function-ref name="led1Off" scoped="" ref="0x40a44550"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40a44630"/>
        <function-ref name="led3On" scoped="" ref="0x40a44710"/>
        <function-ref name="led0On" scoped="" ref="0x40a447f0"/>
        <function-ref name="led2Off" scoped="" ref="0x40a448d0"/>
        <function-ref name="led2On" scoped="" ref="0x40a449b0"/>
        <function-ref name="set" scoped="" ref="0x40a44b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x409fbd80" loc="77:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc">
      <component-ref qname="Atm128I2CMasterP.Master"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x409fbd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a27010"/>
        <function-ref name="stop" scoped="" ref="0x40a270f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CPacket" ref="0x40a272e0" loc="78:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2CMasterPacketP.nc">
      <component-ref qname="Atm128I2CMasterP.Master"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2CPacket" scoped="" ref="0x40a272e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="I2CPacket"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x40928540"/>
            <typename><typedef-ref name="TI2CBasicAddr" ref="0x409286a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40a27928"/>
        <function-ref name="writeDone" scoped="" ref="0x40a26c50"/>
        <function-ref name="write" scoped="" ref="0x40a26010"/>
        <function-ref name="readDone" scoped="" ref="0x40a26630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2C" ref="0x40a42538" loc="43:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusC.nc">
      <component-ref qname="HplAtm128I2CBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2C" scoped="" ref="0x40a42538"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128I2CBus"/>
      </instance>
      <interface-functions>
        <function-ref name="readCurrent" scoped="" ref="0x40a42710"/>
        <function-ref name="sendCommand" scoped="" ref="0x40a427f0"/>
        <function-ref name="setStart" scoped="" ref="0x40a428d0"/>
        <function-ref name="status" scoped="" ref="0x40a429b0"/>
        <function-ref name="hasAcks" scoped="" ref="0x40a42a90"/>
        <function-ref name="isEnabled" scoped="" ref="0x40a42b70"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x40a42c50"/>
        <function-ref name="read" scoped="" ref="0x40a42d30"/>
        <function-ref name="init" scoped="" ref="0x40a42e10"/>
        <function-ref name="enableAck" scoped="" ref="0x40a42ef0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x40a3f010"/>
        <function-ref name="hasStart" scoped="" ref="0x40a3f0f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40a3f1d0"/>
        <function-ref name="commandComplete" scoped="" ref="0x40a3f330"/>
        <function-ref name="enable" scoped="" ref="0x40a3f410"/>
        <function-ref name="write" scoped="" ref="0x40a3f4f0"/>
        <function-ref name="isRealInterruptPending" scoped="" ref="0x40a3f5d0"/>
        <function-ref name="off" scoped="" ref="0x40a3f6b0"/>
        <function-ref name="setStop" scoped="" ref="0x40a3f790"/>
        <function-ref name="setInterruptPending" scoped="" ref="0x40a3f870"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x40a3f950"/>
        <function-ref name="hasStop" scoped="" ref="0x40a3fa30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2C" ref="0x40a3e5d8" loc="56:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusP.nc">
      <component-ref qname="HplAtm128I2CBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2C" scoped="" ref="0x40a3e5d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128I2CBus"/>
      </instance>
      <interface-functions>
        <function-ref name="readCurrent" scoped="" ref="0x40a3e7b0"/>
        <function-ref name="sendCommand" scoped="" ref="0x40a3e890"/>
        <function-ref name="setStart" scoped="" ref="0x40a3e970"/>
        <function-ref name="status" scoped="" ref="0x40a3ea50"/>
        <function-ref name="hasAcks" scoped="" ref="0x40a3eb30"/>
        <function-ref name="isEnabled" scoped="" ref="0x40a3ec10"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x40a3ecf0"/>
        <function-ref name="read" scoped="" ref="0x40a3edd0"/>
        <function-ref name="init" scoped="" ref="0x40a3eeb0"/>
        <function-ref name="enableAck" scoped="" ref="0x40a3b010"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x40a3b0f0"/>
        <function-ref name="hasStart" scoped="" ref="0x40a3b1d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40a3b2b0"/>
        <function-ref name="commandComplete" scoped="" ref="0x40a3b410"/>
        <function-ref name="enable" scoped="" ref="0x40a3b4f0"/>
        <function-ref name="write" scoped="" ref="0x40a3b5d0"/>
        <function-ref name="isRealInterruptPending" scoped="" ref="0x40a3b6b0"/>
        <function-ref name="off" scoped="" ref="0x40a3b790"/>
        <function-ref name="setStop" scoped="" ref="0x40a3b870"/>
        <function-ref name="setInterruptPending" scoped="" ref="0x40a3b950"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x40a3ba30"/>
        <function-ref name="hasStop" scoped="" ref="0x40a3bb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x40a3bd18" loc="57:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusP.nc">
      <component-ref qname="HplAtm128I2CBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x40a3bd18"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x40a3bef0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="I2CClk" ref="0x40a3a140" loc="60:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusP.nc">
      <component-ref qname="HplAtm128I2CBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2CClk" scoped="" ref="0x40a3a140"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a3a318"/>
        <function-ref name="isInput" scoped="" ref="0x40a3a3f8"/>
        <function-ref name="toggle" scoped="" ref="0x40a3a4d8"/>
        <function-ref name="isOutput" scoped="" ref="0x40a3a5b8"/>
        <function-ref name="get" scoped="" ref="0x40a3a698"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a3a778"/>
        <function-ref name="set" scoped="" ref="0x40a3a858"/>
        <function-ref name="clr" scoped="" ref="0x40a3a938"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x40a39558" loc="62:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusP.nc">
      <component-ref qname="HplAtm128I2CBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x40a39558"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40a39730"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="I2CData" ref="0x40a3ab40" loc="61:/opt/tinyos/tos/chips/atm128rfa1/i2c/HplAtm128I2CBusP.nc">
      <component-ref qname="HplAtm128I2CBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="I2CData" scoped="" ref="0x40a3ab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a3ad18"/>
        <function-ref name="isInput" scoped="" ref="0x40a3adf8"/>
        <function-ref name="toggle" scoped="" ref="0x40a3aed8"/>
        <function-ref name="isOutput" scoped="" ref="0x40a39010"/>
        <function-ref name="get" scoped="" ref="0x40a390f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a391d0"/>
        <function-ref name="set" scoped="" ref="0x40a392b0"/>
        <function-ref name="clr" scoped="" ref="0x40a39390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40a5d010" loc="46:/opt/tinyos/tos/platforms/ucmini/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40a5d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a5d1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x40a5d378" loc="47:/opt/tinyos/tos/platforms/ucmini/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40a5d378"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40a5d550"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40a5d630"/>
        <function-ref name="led1On" scoped="" ref="0x40a5d710"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40a5d7f0"/>
        <function-ref name="led3Off" scoped="" ref="0x40a5d8d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40a5d9b0"/>
        <function-ref name="get" scoped="" ref="0x40a5da90"/>
        <function-ref name="led1Off" scoped="" ref="0x40a5db70"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40a5dc50"/>
        <function-ref name="led3On" scoped="" ref="0x40a5dd30"/>
        <function-ref name="led0On" scoped="" ref="0x40a5de10"/>
        <function-ref name="led2Off" scoped="" ref="0x40a5def0"/>
        <function-ref name="led2On" scoped="" ref="0x40a5c010"/>
        <function-ref name="set" scoped="" ref="0x40a5c170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusPowerManager" ref="0x40a71698" loc="36:/opt/tinyos/tos/platforms/ucmini/I2CBusPowerManagerC.nc">
      <component-ref qname="I2CBusPowerManagerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusPowerManager" scoped="" ref="0x40a71698"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusPowerManager"/>
      </instance>
      <interface-functions>
        <function-ref name="powerOn" scoped="" ref="0x40a71870"/>
        <function-ref name="requestPower" scoped="" ref="0x40a71950"/>
        <function-ref name="powerOff" scoped="" ref="0x40a71a30"/>
        <function-ref name="configure" scoped="" ref="0x40a71b10"/>
        <function-ref name="releasePower" scoped="" ref="0x40a71bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusPowerManager" ref="0x40a6de00" loc="37:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc">
      <component-ref qname="I2CBusPowerManagerC.BusPowerManagerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusPowerManager" scoped="" ref="0x40a6de00"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusPowerManager"/>
      </instance>
      <interface-functions>
        <function-ref name="powerOn" scoped="" ref="0x40a6c010"/>
        <function-ref name="requestPower" scoped="" ref="0x40a6c0f0"/>
        <function-ref name="powerOff" scoped="" ref="0x40a6c1d0"/>
        <function-ref name="configure" scoped="" ref="0x40a6c2b0"/>
        <function-ref name="releasePower" scoped="" ref="0x40a6c390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x40a6c4f0" loc="38:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerC.nc">
      <component-ref qname="I2CBusPowerManagerC.BusPowerManagerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GeneralIO" scoped="" ref="0x40a6c4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40a6c6c8"/>
        <function-ref name="isInput" scoped="" ref="0x40a6c7a8"/>
        <function-ref name="toggle" scoped="" ref="0x40a6c888"/>
        <function-ref name="isOutput" scoped="" ref="0x40a6c968"/>
        <function-ref name="get" scoped="" ref="0x40a6ca48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40a6cb28"/>
        <function-ref name="set" scoped="" ref="0x40a6cc08"/>
        <function-ref name="clr" scoped="" ref="0x40a6cce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusPowerManager" ref="0x40c23958" loc="37:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerP.nc">
      <component-ref qname="I2CBusPowerManagerC.BusPowerManagerC.BusPowerManagerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusPowerManager" scoped="" ref="0x40c23958"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusPowerManager"/>
      </instance>
      <interface-functions>
        <function-ref name="powerOn" scoped="" ref="0x40c23b30"/>
        <function-ref name="requestPower" scoped="" ref="0x40c23c10"/>
        <function-ref name="powerOff" scoped="" ref="0x40c23cf0"/>
        <function-ref name="configure" scoped="" ref="0x40c23dd0"/>
        <function-ref name="releasePower" scoped="" ref="0x40c23eb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40c1ebf0" loc="40:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerP.nc">
      <component-ref qname="I2CBusPowerManagerC.BusPowerManagerC.BusPowerManagerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40c1ebf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40c1edc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x40c1e298" loc="39:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerP.nc">
      <component-ref qname="I2CBusPowerManagerC.BusPowerManagerC.BusPowerManagerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GeneralIO" scoped="" ref="0x40c1e298"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40c1e470"/>
        <function-ref name="isInput" scoped="" ref="0x40c1e550"/>
        <function-ref name="toggle" scoped="" ref="0x40c1e630"/>
        <function-ref name="isOutput" scoped="" ref="0x40c1e710"/>
        <function-ref name="get" scoped="" ref="0x40c1e7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40c1e8d0"/>
        <function-ref name="set" scoped="" ref="0x40c1e9b0"/>
        <function-ref name="clr" scoped="" ref="0x40c1ea90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40c210c0" loc="38:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManagerP.nc">
      <component-ref qname="I2CBusPowerManagerC.BusPowerManagerC.BusPowerManagerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40c210c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40c20ba8"/>
        <function-ref name="fired" scoped="" ref="0x40c21e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40c20568"/>
        <function-ref name="isOneShot" scoped="" ref="0x40c20310"/>
        <function-ref name="getdt" scoped="" ref="0x40c1e068"/>
        <function-ref name="gett0" scoped="" ref="0x40c20e00"/>
        <function-ref name="isRunning" scoped="" ref="0x40c200b8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40c216e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40c20888"/>
        <function-ref name="startOneShot" scoped="" ref="0x40c21968"/>
        <function-ref name="stop" scoped="" ref="0x40c21be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40c47d60" loc="45:/opt/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="I2CBusPowerManagerC.BusPowerManagerC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40c47d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404212e0"/>
            <typename><typedef-ref name="TMilli" ref="0x404214a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40c458a8"/>
        <function-ref name="fired" scoped="" ref="0x40c46b18"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40c45268"/>
        <function-ref name="isOneShot" scoped="" ref="0x40c45010"/>
        <function-ref name="getdt" scoped="" ref="0x40c45d58"/>
        <function-ref name="gett0" scoped="" ref="0x40c45b00"/>
        <function-ref name="isRunning" scoped="" ref="0x40c46d70"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40c463c0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40c45588"/>
        <function-ref name="startOneShot" scoped="" ref="0x40c46640"/>
        <function-ref name="stop" scoped="" ref="0x40c468c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40aaee78" loc="24:/opt/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="Sht21ArbitratedC.ArbitratedTemp"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40aaee78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x409684d8"/>
        <function-ref name="readDone" scoped="" ref="0x40968740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x40968ba0" loc="26:/opt/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="Sht21ArbitratedC.ArbitratedTemp"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x40968ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40a6f1f0"/>
        <function-ref name="readDone" scoped="" ref="0x40a6f458"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40a6f7d8" loc="27:/opt/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="Sht21ArbitratedC.ArbitratedTemp"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40a6f7d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40a6f9c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40a6faa0"/>
        <function-ref name="request" scoped="" ref="0x40a6fb80"/>
        <function-ref name="granted" scoped="" ref="0x40a6fc60"/>
        <function-ref name="isOwner" scoped="" ref="0x40a6fd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40aab648" loc="92:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40aab648"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40aab830"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40aab910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40aaa600" loc="96:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40aaa600"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40aaa7e8"/>
        <function-ref name="configure" scoped="" ref="0x40aaa8c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40aaba50" loc="93:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40aaba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40aabc28"/>
        <function-ref name="requested" scoped="" ref="0x40aabd08"/>
        <function-ref name="granted" scoped="" ref="0x40aabde8"/>
        <function-ref name="isOwner" scoped="" ref="0x40aabec8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40aaa010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40aacef0" loc="91:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40aacef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40aab0f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40aab1d0"/>
        <function-ref name="request" scoped="" ref="0x40aab2b0"/>
        <function-ref name="granted" scoped="" ref="0x40aab390"/>
        <function-ref name="isOwner" scoped="" ref="0x40aab470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40aaa150" loc="94:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40aaa150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40aaa328"/>
        <function-ref name="userId" scoped="" ref="0x40aaa408"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40c33200" loc="44:/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40c33200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40c333d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x40c33538" loc="45:/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x40c33538"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40c33710"/>
        <function-ref name="isEmpty" scoped="" ref="0x40c337f0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40c338d0"/>
        <function-ref name="dequeue" scoped="" ref="0x40c339b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40c5ce28" loc="55:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40c5ce28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40c5b050"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40c5b130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40c5bdc8" loc="60:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40c5bdc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40c59010"/>
        <function-ref name="configure" scoped="" ref="0x40c590f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40c59250" loc="61:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40c59250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40c59428"/>
        <function-ref name="isEmpty" scoped="" ref="0x40c59508"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40c595e8"/>
        <function-ref name="dequeue" scoped="" ref="0x40c596c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40c5b270" loc="56:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c5b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40c5b448"/>
        <function-ref name="requested" scoped="" ref="0x40c5b528"/>
        <function-ref name="granted" scoped="" ref="0x40c5b608"/>
        <function-ref name="isOwner" scoped="" ref="0x40c5b6e8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40c5b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40c59808" loc="62:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40c59808"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40c599e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40c59ac0"/>
        <function-ref name="led1On" scoped="" ref="0x40c59ba0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40c59c80"/>
        <function-ref name="led3Off" scoped="" ref="0x40c59d60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40c59e40"/>
        <function-ref name="get" scoped="" ref="0x40c59f20"/>
        <function-ref name="led1Off" scoped="" ref="0x40c58018"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40c580f8"/>
        <function-ref name="led3On" scoped="" ref="0x40c581d8"/>
        <function-ref name="led0On" scoped="" ref="0x40c582b8"/>
        <function-ref name="led2Off" scoped="" ref="0x40c58398"/>
        <function-ref name="led2On" scoped="" ref="0x40c58478"/>
        <function-ref name="set" scoped="" ref="0x40c585d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40c5c6e8" loc="54:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40c5c6e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40c5c8d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40c5c9b0"/>
        <function-ref name="request" scoped="" ref="0x40c5ca90"/>
        <function-ref name="granted" scoped="" ref="0x40c5cb70"/>
        <function-ref name="isOwner" scoped="" ref="0x40c5cc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40c5b908" loc="57:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40c5b908"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40c5bae0"/>
        <function-ref name="userId" scoped="" ref="0x40c5bbc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x40c58758" loc="75:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.TempArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x40c58758"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40c58930"/>
        <function-ref name="runTask" scoped="" ref="0x40c58a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40aa8010" loc="36:/opt/tinyos/tos/system/ReadClientP.nc">
      <component-ref qname="Sht21ArbitratedC.TempClient"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40aa8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40aa8648"/>
        <function-ref name="readDone" scoped="" ref="0x40aa88b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualRead" ref="0x40aa8c68" loc="37:/opt/tinyos/tos/system/ReadClientP.nc">
      <component-ref qname="Sht21ArbitratedC.TempClient"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualRead" scoped="" ref="0x40aa8c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40aa72c8"/>
        <function-ref name="readDone" scoped="" ref="0x40aa7520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40ac1068" loc="24:/opt/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="Sht21ArbitratedC.ArbitratedHumi"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40ac1068"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40ac16a0"/>
        <function-ref name="readDone" scoped="" ref="0x40ac1908"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x40ac1d68" loc="26:/opt/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="Sht21ArbitratedC.ArbitratedHumi"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x40ac1d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40ac03c0"/>
        <function-ref name="readDone" scoped="" ref="0x40ac0628"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40ac09a8" loc="27:/opt/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="Sht21ArbitratedC.ArbitratedHumi"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40ac09a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40ac0b90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40ac0c70"/>
        <function-ref name="request" scoped="" ref="0x40ac0d50"/>
        <function-ref name="granted" scoped="" ref="0x40ac0e30"/>
        <function-ref name="isOwner" scoped="" ref="0x40ac0f10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40abe7c8" loc="92:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40abe7c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40abe9b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40abea90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40abc7c0" loc="96:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40abc7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40abc9a8"/>
        <function-ref name="configure" scoped="" ref="0x40abca88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40abebd0" loc="93:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40abebd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40abeda8"/>
        <function-ref name="requested" scoped="" ref="0x40abee88"/>
        <function-ref name="granted" scoped="" ref="0x40abc010"/>
        <function-ref name="isOwner" scoped="" ref="0x40abc0f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40abc1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40abe088" loc="91:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40abe088"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40abe270"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40abe350"/>
        <function-ref name="request" scoped="" ref="0x40abe430"/>
        <function-ref name="granted" scoped="" ref="0x40abe510"/>
        <function-ref name="isOwner" scoped="" ref="0x40abe5f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40abc310" loc="94:/opt/tinyos/tos/system/FcfsArbiterC.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40abc310"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40abc4e8"/>
        <function-ref name="userId" scoped="" ref="0x40abc5c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40c64838" loc="44:/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40c64838"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40c64a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x40c64b70" loc="45:/opt/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x40c64b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40c64d48"/>
        <function-ref name="isEmpty" scoped="" ref="0x40c64e28"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40c64f08"/>
        <function-ref name="dequeue" scoped="" ref="0x40c62010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40c61488" loc="55:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40c61488"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40c61670"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40c61750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40c603f8" loc="60:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40c603f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40c605e0"/>
        <function-ref name="configure" scoped="" ref="0x40c606c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40c60820" loc="61:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40c60820"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40c609f8"/>
        <function-ref name="isEmpty" scoped="" ref="0x40c60ad8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40c60bb8"/>
        <function-ref name="dequeue" scoped="" ref="0x40c60c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40c61890" loc="56:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c61890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40c61a68"/>
        <function-ref name="requested" scoped="" ref="0x40c61b48"/>
        <function-ref name="granted" scoped="" ref="0x40c61c28"/>
        <function-ref name="isOwner" scoped="" ref="0x40c61d08"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40c61de8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40c60dd8" loc="62:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40c60dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40c5e010"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40c5e0f0"/>
        <function-ref name="led1On" scoped="" ref="0x40c5e1d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40c5e2b0"/>
        <function-ref name="led3Off" scoped="" ref="0x40c5e390"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40c5e470"/>
        <function-ref name="get" scoped="" ref="0x40c5e550"/>
        <function-ref name="led1Off" scoped="" ref="0x40c5e630"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40c5e710"/>
        <function-ref name="led3On" scoped="" ref="0x40c5e7f0"/>
        <function-ref name="led0On" scoped="" ref="0x40c5e8d0"/>
        <function-ref name="led2Off" scoped="" ref="0x40c5e9b0"/>
        <function-ref name="led2On" scoped="" ref="0x40c5ea90"/>
        <function-ref name="set" scoped="" ref="0x40c5ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40c62ce8" loc="54:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40c62ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40c62ed0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40c61010"/>
        <function-ref name="request" scoped="" ref="0x40c610f0"/>
        <function-ref name="granted" scoped="" ref="0x40c611d0"/>
        <function-ref name="isOwner" scoped="" ref="0x40c612b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40c61f28" loc="57:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40c61f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40c60110"/>
        <function-ref name="userId" scoped="" ref="0x40c601f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x40c5ed70" loc="75:/opt/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x40c5ed70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40c5d010"/>
        <function-ref name="runTask" scoped="" ref="0x40c5d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40abbc38" loc="36:/opt/tinyos/tos/system/ReadClientP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiClient"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40abbc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40aba288"/>
        <function-ref name="readDone" scoped="" ref="0x40aba4f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualRead" ref="0x40aba8a8" loc="37:/opt/tinyos/tos/system/ReadClientP.nc">
      <component-ref qname="Sht21ArbitratedC.HumiClient"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualRead" scoped="" ref="0x40aba8a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40abaed0"/>
        <function-ref name="readDone" scoped="" ref="0x40ab9150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40bd4958" loc="37:/opt/tinyos/tos/platforms/ucmini/chips/sht21/HumidityC.nc">
      <component-ref qname="TH20SensorC.Sht7.HumidityC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40bd4958"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40bd3010"/>
        <function-ref name="readDone" scoped="" ref="0x40bd3268"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40c9cbc8" loc="38:/opt/tinyos/tos/chips/sht21/Sht21RawHumidityC.nc">
      <component-ref qname="TH20SensorC.Sht7.HumidityC.Sht21RawHumidityC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40c9cbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40c9a218"/>
        <function-ref name="readDone" scoped="" ref="0x40c9a470"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Read" loc="49:/opt/tinyos/tos/interfaces/Read.nc">
      <documentation loc="33:/opt/tinyos/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x404322d8" loc="49:/opt/tinyos/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x404322d8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x40432788" loc="55:/opt/tinyos/tos/interfaces/Read.nc">
        <documentation loc="50:/opt/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x40431010" loc="63:/opt/tinyos/tos/interfaces/Read.nc">
        <documentation loc="57:/opt/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x404322d8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40432c08" loc="63:/opt/tinyos/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x40432dd8" loc="63:/opt/tinyos/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x404322d8"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="53:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
      <documentation loc="33:/opt/tinyos/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x40412438" loc="63:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="60:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x40412880" loc="69:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="65:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x40412d00" loc="74:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="71:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x40411580" loc="85:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="81:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led3Off" ref="0x40419b40" loc="113:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="110:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn off LED 3.</short>
          <long>&#10; Turn off LED 3. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x40419298" loc="102:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="98:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x404184b8" loc="134:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="122:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LED_LED0, LED_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x40411138" loc="79:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="76:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led3Toggle" ref="0x40418010" loc="119:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="115:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Toggle LED 3; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 3; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led3On" ref="0x40419718" loc="108:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="105:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn on LED 3.</short>
          <long>&#10; Turn on LED 3. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x40412010" loc="58:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="55:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x40411e28" loc="96:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="93:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x40411a00" loc="91:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="88:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40418c30" loc="149:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
        <documentation loc="137:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x40418ad8" loc="149:/opt/tinyos/tos/platforms/ucmini/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/opt/tinyos/tos/lib/timer/Timer.nc">
      <documentation loc="36:/opt/tinyos/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x404206f8" loc="53:/opt/tinyos/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x404206f8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40424f00" loc="136:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="132:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40427c88" loc="83:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="80:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x40425de8" loc="114:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="100:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40425aa0" loc="114:/opt/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x40425c88" loc="114:/opt/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x404255f8" loc="98:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="94:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x4042d888" loc="151:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="146:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x4042d358" loc="144:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="138:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x40425138" loc="92:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="86:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x40420d50" loc="64:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="56:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40420bf8" loc="64:/opt/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x404248e0" loc="129:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="116:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40424598" loc="129:/opt/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x40424780" loc="129:/opt/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x40427408" loc="73:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="66:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x404272b0" loc="73:/opt/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x404278d8" loc="78:/opt/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/opt/tinyos/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/opt/tinyos/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40448d40" loc="56:/opt/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40448d40"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40448ea8" loc="56:/opt/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40448ea8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x404541a8" loc="109:/opt/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/opt/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40448ea8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x4044ce58" loc="78:/opt/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/opt/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x40455b18" loc="103:/opt/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/opt/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40448ea8"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40448ea8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x404557c8" loc="103:/opt/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40448ea8"/></type-var>
          </variable>
          <variable name="dt" ref="0x404559b8" loc="103:/opt/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40448ea8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x404552c0" loc="88:/opt/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/opt/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x40454638" loc="116:/opt/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/opt/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40448ea8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x4044c518" loc="66:/opt/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/opt/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40448ea8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x4044c3c0" loc="66:/opt/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40448ea8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x4044c9f8" loc="73:/opt/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/opt/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AtmegaCompare" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
      <parameters>
        <typedef name="size_type" ref="0x40464708" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
          <interfacedef-ref qname="AtmegaCompare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40464708"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setMode" ref="0x4046cdb0" loc="70:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x4046cc58" loc="70:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x4046d910" loc="51:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x4046d530" loc="48:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="force" ref="0x4046a5a0" loc="78:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40464c00" loc="40:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40464708"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x4046dcc8" loc="54:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x4046a1d8" loc="73:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x4046c858" loc="65:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x4046d168" loc="43:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40464708"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x4046d010" loc="43:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40464708"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x4046c0c8" loc="59:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x4046c478" loc="62:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:/opt/tinyos/tos/interfaces/Init.nc">
      <documentation loc="34:/opt/tinyos/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x40456ec0" loc="62:/opt/tinyos/tos/interfaces/Init.nc">
        <documentation loc="53:/opt/tinyos/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AtmegaCounter" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
      <parameters>
        <typedef name="size_type" ref="0x40460670" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
          <interfacedef-ref qname="AtmegaCounter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40460670"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setMode" ref="0x40466db0" loc="72:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x40466c58" loc="72:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x40467930" loc="53:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40460b68" loc="40:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40460670"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40467ce8" loc="56:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x404651d8" loc="75:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40467550" loc="49:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40466858" loc="67:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40467168" loc="43:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40460670"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x40467010" loc="43:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40460670"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x404660c8" loc="61:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40466478" loc="64:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x40492770" loc="60:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x40492618" loc="60:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x40497d40" loc="31:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x40494410" loc="39:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x404942b8" loc="39:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x40494ad8" loc="46:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40494980" loc="46:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x401ea848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x40492070" loc="53:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/opt/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AtmegaCapture" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
      <parameters>
        <typedef name="size_type" ref="0x404ac398" loc="35:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
          <interfacedef-ref qname="AtmegaCapture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x404ac398"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setMode" ref="0x404b3a30" loc="70:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x404b38d8" loc="70:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x404b5588" loc="51:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x404b51a8" loc="48:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x404ac890" loc="40:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x404ac398"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x404b5940" loc="54:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x404b3e40" loc="73:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x404b34d8" loc="65:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x404acdd0" loc="43:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x404ac398"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x404acc78" loc="43:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x404ac398"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x404b5d08" loc="59:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x404b30f8" loc="62:/opt/tinyos/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/opt/tinyos/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/opt/tinyos/tos/platforms/ucmini/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x4040baf0" loc="62:/opt/tinyos/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/opt/tinyos/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x403e7470"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/opt/tinyos/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/opt/tinyos/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x40332ec8" loc="52:/opt/tinyos/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/opt/tinyos/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/opt/tinyos/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/opt/tinyos/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x403f8a90" loc="76:/opt/tinyos/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/opt/tinyos/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/opt/tinyos/tos/lib/timer/Counter.nc">
      <documentation loc="36:/opt/tinyos/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40518c98" loc="57:/opt/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40518c98"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40518e00" loc="57:/opt/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40518e00"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40512300" loc="64:/opt/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="59:/opt/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40518e00"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x40512d28" loc="76:/opt/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="73:/opt/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x40512828" loc="71:/opt/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="66:/opt/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x4051f138" loc="82:/opt/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="78:/opt/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/opt/tinyos/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x40333888" loc="67:/opt/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/opt/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x40333da0" loc="75:/opt/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/opt/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/opt/tinyos/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/opt/tinyos/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x405bb2b0" loc="44:/opt/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x405bb698" loc="45:/opt/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x405bfaf8" loc="42:/opt/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x405bbe68" loc="47:/opt/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x405bfeb8" loc="43:/opt/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x405bba70" loc="46:/opt/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x405bf3b8" loc="40:/opt/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x405bf748" loc="41:/opt/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:/opt/tinyos/tos/interfaces/SplitControl.nc">
      <documentation loc="72:/opt/tinyos/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x4065bd58" loc="113:/opt/tinyos/tos/interfaces/SplitControl.nc">
        <documentation loc="106:/opt/tinyos/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x4065bc00" loc="113:/opt/tinyos/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x4066eae0" loc="138:/opt/tinyos/tos/interfaces/SplitControl.nc">
        <documentation loc="132:/opt/tinyos/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x4066e988" loc="138:/opt/tinyos/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x4065b518" loc="104:/opt/tinyos/tos/interfaces/SplitControl.nc">
        <documentation loc="89:/opt/tinyos/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x4066e2a8" loc="130:/opt/tinyos/tos/interfaces/SplitControl.nc">
        <documentation loc="115:/opt/tinyos/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:/opt/tinyos/tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:/opt/tinyos/tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x4066b880" loc="68:/opt/tinyos/tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:/opt/tinyos/tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x4066b420" loc="61:/opt/tinyos/tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:/opt/tinyos/tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x4066b010" loc="54:/opt/tinyos/tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x4065da00" loc="53:/opt/tinyos/tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:/opt/tinyos/tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtmegaPinChange" loc="35:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
      <function command="" provided="0" name="test" ref="0x406808e8" loc="43:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40680508" loc="40:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x4067d458" loc="54:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x4067d868" loc="57:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40680ca0" loc="46:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMask" ref="0x4067b218" loc="65:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x4067b0c0" loc="65:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x4067d090" loc="51:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPins" ref="0x4067b638" loc="70:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMask" ref="0x4067dc88" loc="62:/opt/tinyos/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:/opt/tinyos/tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x406b0a08" loc="80:/opt/tinyos/tos/interfaces/AMSend.nc">
        <documentation loc="60:/opt/tinyos/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40654398"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x406b04a8" loc="80:/opt/tinyos/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40654398"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x406b06c0" loc="80:/opt/tinyos/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406b08a0" loc="80:/opt/tinyos/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x406ad5c0" loc="135:/opt/tinyos/tos/interfaces/AMSend.nc">
        <documentation loc="126:/opt/tinyos/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406ad260" loc="135:/opt/tinyos/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406ad440" loc="135:/opt/tinyos/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x406afce8" loc="123:/opt/tinyos/tos/interfaces/AMSend.nc">
        <documentation loc="113:/opt/tinyos/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x406ae6c8" loc="96:/opt/tinyos/tos/interfaces/AMSend.nc">
        <documentation loc="82:/opt/tinyos/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406ae570" loc="96:/opt/tinyos/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x406af3e0" loc="110:/opt/tinyos/tos/interfaces/AMSend.nc">
        <documentation loc="98:/opt/tinyos/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406af088" loc="110:/opt/tinyos/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x406af280" loc="110:/opt/tinyos/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:/opt/tinyos/tos/interfaces/Packet.nc">
      <documentation loc="42:/opt/tinyos/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x406bd058" loc="65:/opt/tinyos/tos/interfaces/Packet.nc">
        <documentation loc="58:/opt/tinyos/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406bcee8" loc="65:/opt/tinyos/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x406bda28" loc="78:/opt/tinyos/tos/interfaces/Packet.nc">
        <documentation loc="67:/opt/tinyos/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406bd8d0" loc="78:/opt/tinyos/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x406b99b8" loc="126:/opt/tinyos/tos/interfaces/Packet.nc">
        <documentation loc="109:/opt/tinyos/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406b9658" loc="126:/opt/tinyos/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406b9838" loc="126:/opt/tinyos/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x406b9070" loc="106:/opt/tinyos/tos/interfaces/Packet.nc">
        <documentation loc="96:/opt/tinyos/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x406ba6a8" loc="94:/opt/tinyos/tos/interfaces/Packet.nc">
        <documentation loc="80:/opt/tinyos/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406ba368" loc="94:/opt/tinyos/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406ba548" loc="94:/opt/tinyos/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:/opt/tinyos/tos/interfaces/Receive.nc">
      <documentation loc="34:/opt/tinyos/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x406be410" loc="78:/opt/tinyos/tos/interfaces/Receive.nc">
        <documentation loc="58:/opt/tinyos/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
              <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4069ee98" loc="78:/opt/tinyos/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x406be0a8" loc="78:/opt/tinyos/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406be288" loc="78:/opt/tinyos/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x4069d9d0" loc="59:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4069d878" loc="59:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x406d14f8" loc="71:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406d13a0" loc="71:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x406d0010" loc="85:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406d1e28" loc="85:/opt/tinyos/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:/opt/tinyos/tos/interfaces/AMPacket.nc">
      <documentation loc="42:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x406c5c50" loc="177:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="164:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x40654138"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x406c5af8" loc="177:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x406c85d0" loc="88:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="80:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40654398"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x406c8478" loc="88:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x406b7518" loc="68:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="63:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40654398"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x406b7bb0" loc="78:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="70:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40654398"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x406b7a58" loc="78:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x406b5ed0" loc="121:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="105:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40654398"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x406b5b68" loc="121:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x406b5d70" loc="121:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40654398"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x406b51e8" loc="103:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="90:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40654398"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x406c8e50" loc="103:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x406b5088" loc="103:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40654398"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x406c45f0" loc="147:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40648e88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x406c4498" loc="147:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x406c5170" loc="162:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="149:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40648e88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x406c4df8" loc="162:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x406c5010" loc="162:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40648e88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x406c7a90" loc="136:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="123:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x406c7938" loc="136:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x406c18e8" loc="187:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="179:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x40654138"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x406c1588" loc="187:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x406c1788" loc="187:/opt/tinyos/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x40654138"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x406c31a8" loc="195:/opt/tinyos/tos/interfaces/AMPacket.nc">
        <documentation loc="189:/opt/tinyos/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x40654138"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:/opt/tinyos/tos/interfaces/Send.nc">
      <documentation loc="34:/opt/tinyos/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x406c9488" loc="75:/opt/tinyos/tos/interfaces/Send.nc">
        <documentation loc="57:/opt/tinyos/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406c9148" loc="75:/opt/tinyos/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406c9328" loc="75:/opt/tinyos/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x406d9190" loc="125:/opt/tinyos/tos/interfaces/Send.nc">
        <documentation loc="115:/opt/tinyos/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406dad78" loc="125:/opt/tinyos/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406d9010" loc="125:/opt/tinyos/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x406da818" loc="112:/opt/tinyos/tos/interfaces/Send.nc">
        <documentation loc="102:/opt/tinyos/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x406db168" loc="89:/opt/tinyos/tos/interfaces/Send.nc">
        <documentation loc="77:/opt/tinyos/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406db010" loc="89:/opt/tinyos/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x406dbe00" loc="100:/opt/tinyos/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406dbaa8" loc="100:/opt/tinyos/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x406dbca0" loc="100:/opt/tinyos/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x407103a0" loc="31:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40710010" loc="31:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x40710240" loc="31:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x407110c8" loc="15:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x40711998" loc="23:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40711620" loc="23:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x406b21f0"/>
                <typename><typedef-ref name="message_t" ref="0x406b0010"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x40711838" loc="23:/opt/tinyos/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:/opt/tinyos/tos/interfaces/StdControl.nc">
      <documentation loc="72:/opt/tinyos/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x407334d0" loc="95:/opt/tinyos/tos/interfaces/StdControl.nc">
        <documentation loc="88:/opt/tinyos/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40733998" loc="105:/opt/tinyos/tos/interfaces/StdControl.nc">
        <documentation loc="97:/opt/tinyos/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:/opt/tinyos/tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:/opt/tinyos/tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x40725b60" loc="54:/opt/tinyos/tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:/opt/tinyos/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x40725728" loc="49:/opt/tinyos/tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:/opt/tinyos/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x40721010" loc="56:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x40721c70" loc="72:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x40720d60" loc="94:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40720c08" loc="94:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x407201a8" loc="79:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x40721740" loc="65:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x407215e8" loc="65:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x4071f278" loc="100:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x40720708" loc="85:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:/opt/tinyos/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x40727d98" loc="71:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x40726488" loc="81:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x40727788" loc="62:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x40727630" loc="62:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x40726bc0" loc="91:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40726a68" loc="91:/opt/tinyos/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x40729d28" loc="62:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x407246c8" loc="69:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40724570" loc="69:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x40724d60" loc="80:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40724c08" loc="80:/opt/tinyos/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:/opt/tinyos/tos/interfaces/UartStream.nc">
      <documentation loc="32:/opt/tinyos/tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x407d0010" loc="48:/opt/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="39:/opt/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x407d3bf8" loc="48:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x407d3de8" loc="48:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x407ce410" loc="79:/opt/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="74:/opt/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x407ce2b8" loc="79:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x407cec18" loc="90:/opt/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="81:/opt/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x407ce8c8" loc="90:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x407ceab8" loc="90:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x407cf850" loc="65:/opt/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="59:/opt/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x407e4aa8" loc="99:/opt/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="92:/opt/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x407e4558" loc="99:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x407e4748" loc="99:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x407e4940" loc="99:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x407cfdd8" loc="72:/opt/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="67:/opt/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x407d0e70" loc="57:/opt/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="50:/opt/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x407d0920" loc="57:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x407d0b10" loc="57:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x407d0d08" loc="57:/opt/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:/opt/tinyos/tos/interfaces/UartByte.nc">
      <documentation loc="32:/opt/tinyos/tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x407ec2b8" loc="46:/opt/tinyos/tos/interfaces/UartByte.nc">
        <documentation loc="39:/opt/tinyos/tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x407ec160" loc="46:/opt/tinyos/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x407ecb50" loc="56:/opt/tinyos/tos/interfaces/UartByte.nc">
        <documentation loc="48:/opt/tinyos/tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x407ec7e8" loc="56:/opt/tinyos/tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x407ec9f0" loc="56:/opt/tinyos/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x407f9210" loc="44:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x407fa9b0" loc="42:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x407f87e0" loc="49:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x407f8688" loc="49:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x407f9ec8" loc="47:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x407fa138" loc="40:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x407fa578" loc="41:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x407fadf0" loc="43:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x407f9610" loc="45:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x407f9b18" loc="46:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x407f99c0" loc="46:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x407f82b0" loc="48:/opt/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/opt/tinyos/tos/interfaces/Boot.nc">
      <documentation loc="42:/opt/tinyos/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x40870010" loc="60:/opt/tinyos/tos/interfaces/Boot.nc">
        <documentation loc="51:/opt/tinyos/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/opt/tinyos/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/opt/tinyos/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x4032f010" loc="57:/opt/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/opt/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x4032f918" loc="72:/opt/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/opt/tinyos/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x4032f450" loc="65:/opt/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/opt/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusPowerManager" loc="35:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
      <function event="" provided="0" name="powerOn" ref="0x40951138" loc="63:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
        <documentation loc="58:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
          <short>&#10; This event is called when the bus is powered on and the maximum &#10; specified startup time has elapsed.</short>
          <long>&#10; This event is called when the bus is powered on and the maximum &#10; specified startup time has elapsed. Implementations should&#10; initialize the chip or go into power down mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusPowerManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestPower" ref="0x409347a8" loc="48:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
        <documentation loc="44:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
          <short>&#10; Requests to power up this bus.</short>
          <long>&#10; Requests to power up this bus. The bus might be already powered&#10; up, in which case the powerOn event will not come.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusPowerManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="powerOff" ref="0x40951610" loc="69:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
        <documentation loc="65:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
          <short>&#10; This event is called when there are no outstanding power requests&#10; and the keepalive timeout value has expired.</short>
          <long>&#10; This event is called when there are no outstanding power requests&#10; and the keepalive timeout value has expired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusPowerManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x409342c0" loc="42:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
        <documentation loc="37:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
          <short>&#10; Sets the startup and keepalive timeout values in milliseconds.</short>
          <long>&#10; Sets the startup and keepalive timeout values in milliseconds.&#10; Only the largest numbers are remembered, as the bus might not&#10; be operational if one of the chips on it is not operational.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusPowerManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="startup" ref="0x40935ed8" loc="42:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
          <variable name="keepalive" ref="0x40934160" loc="42:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="releasePower" ref="0x40934c28" loc="56:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
        <documentation loc="50:/opt/tinyos/tos/chips/atm128rfa1/BusPowerManager.nc">
          <short>&#10; Releases the power up request.</short>
          <long>&#10; Releases the power up request. You must call this command exactly&#10; the same number of times as you have called requestPower. If other&#10; chips still want to keep the power (e.g. a measurement is in&#10; progress), then powerOff will not be called.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusPowerManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:/opt/tinyos/tos/interfaces/Resource.nc">
      <documentation loc="63:/opt/tinyos/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x40936818" loc="120:/opt/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="104:/opt/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x4093ae28" loc="97:/opt/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="90:/opt/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x4093a828" loc="88:/opt/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="78:/opt/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x409363a8" loc="102:/opt/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="99:/opt/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x40936f10" loc="128:/opt/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="122:/opt/tinyos/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="I2CPacket" loc="59:/opt/tinyos/tos/interfaces/I2CPacket.nc">
      <parameters>
        <typedef name="addr_size" ref="0x40925298" loc="59:/opt/tinyos/tos/interfaces/I2CPacket.nc">
          <interfacedef-ref qname="I2CPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="addr_size" scoped="" ref="0x40925298"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x40942010" loc="76:/opt/tinyos/tos/interfaces/I2CPacket.nc">
        <documentation loc="60:/opt/tinyos/tos/interfaces/I2CPacket.nc">
          <short>&#10; Perform an I2C read operation&#10;&#10; </short>
          <long>&#10; Perform an I2C read operation&#10;&#10; @param flags Flags that may be logical ORed and defined by:&#10;    I2C_START   - The START condition is transmitted at the beginning &#10;                   of the packet if set.&#10;    I2C_STOP    - The STOP condition is transmitted at the end of the &#10;                   packet if set.&#10;    I2C_ACK_END - ACK the last byte if set. Otherwise NACK last byte. This&#10;                   flag cannot be used with the I2C_STOP flag.&#10; @param addr The slave device address. Only used if I2C_START is set.&#10; @param length Length, in bytes, to be read&#10; @param 'uint8_t* COUNT(length) data' A point to a data buffer to read into&#10;&#10; @return SUCCESS if bus available and request accepted. &#10;</long>
        </documentation>
        <interfacedef-ref qname="I2CPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="i2c_flags_t" ref="0x40928908"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x409257c0" loc="76:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="i2c_flags_t" ref="0x40928908"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x409259c0" loc="76:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x40925bc0" loc="76:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x40925dd0" loc="76:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x4093e658" loc="112:/opt/tinyos/tos/interfaces/I2CPacket.nc">
        <documentation loc="104:/opt/tinyos/tos/interfaces/I2CPacket.nc">
          <short>&#10; Notification that the write operation has completed&#10;&#10; </short>
          <long>&#10; Notification that the write operation has completed&#10;&#10; @param addr The slave device address&#10; @param length Length, in bytes, written&#10; @param 'uint8_t* COUNT(length) data' Pointer to the data buffer written&#10; @param success SUCCESS if transfer completed without error.&#10;</long>
        </documentation>
        <interfacedef-ref qname="I2CPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x4093fec8" loc="112:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x4093e0d8" loc="112:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x4093e2d8" loc="112:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x4093e4e8" loc="112:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x40941390" loc="92:/opt/tinyos/tos/interfaces/I2CPacket.nc">
        <documentation loc="78:/opt/tinyos/tos/interfaces/I2CPacket.nc">
          <short>&#10; Perform an I2C write operation&#10;&#10; </short>
          <long>&#10; Perform an I2C write operation&#10;&#10; @param flags Flags that may be logical ORed and defined by:&#10;    I2C_START   - The START condition is transmitted at the beginning &#10;                   of the packet if set.&#10;    I2C_STOP    - The STOP condition is transmitted at the end of the &#10;                   packet if set.&#10; @param addr The slave device address. Only used if I2C_START is set.&#10; @param length Length, in bytes, to be read&#10; @param 'uint8_t* COUNT(length) data' A point to a data buffer to read into&#10;&#10; @return SUCCESS if bus available and request accepted. &#10;</long>
        </documentation>
        <interfacedef-ref qname="I2CPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="i2c_flags_t" ref="0x40928908"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x40942b30" loc="92:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="i2c_flags_t" ref="0x40928908"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x40942d30" loc="92:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x40941010" loc="92:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x40941220" loc="92:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x4093f590" loc="102:/opt/tinyos/tos/interfaces/I2CPacket.nc">
        <documentation loc="94:/opt/tinyos/tos/interfaces/I2CPacket.nc">
          <short>&#10; Notification that the read operation has completed&#10;&#10; </short>
          <long>&#10; Notification that the read operation has completed&#10;&#10; @param addr The slave device address&#10; @param length Length, in bytes, read&#10; @param 'uint8_t* COUNT(length) data' Pointer to the received data buffer&#10; @param success SUCCESS if transfer completed without error.&#10;</long>
        </documentation>
        <interfacedef-ref qname="I2CPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40941dd8" loc="102:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x4093f010" loc="102:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x401ea1e8"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x4093f210" loc="102:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x4093f420" loc="102:/opt/tinyos/tos/interfaces/I2CPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:/opt/tinyos/tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:/opt/tinyos/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x40990c40" loc="53:/opt/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:/opt/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x4098d2c8" loc="61:/opt/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:/opt/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:/opt/tinyos/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:/opt/tinyos/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x40987588" loc="65:/opt/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:/opt/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x409870c8" loc="59:/opt/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:/opt/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x4098c958" loc="56:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x4098b3b0" loc="73:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x4098c428" loc="46:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x4098ce68" loc="65:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x4098b988" loc="81:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/opt/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:/opt/tinyos/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:/opt/tinyos/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x4098fc30" loc="90:/opt/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:/opt/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x40989158" loc="98:/opt/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:/opt/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x40982e58" loc="79:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4098e850"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x40982d00" loc="79:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4098e850"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x40985ad8" loc="53:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x409821c0" loc="62:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4098e850"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x40982068" loc="62:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4098e850"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x40982770" loc="70:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:/opt/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x4098e850"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:/opt/tinyos/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:/opt/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x409c77a8" loc="62:/opt/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:/opt/tinyos/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:/opt/tinyos/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:/opt/tinyos/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x409c5320" loc="95:/opt/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:/opt/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x409c5808" loc="105:/opt/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:/opt/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40334340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128I2C" loc="44:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2C.nc">
      <documentation loc="35:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2C.nc">
        <short>&#10; An interface for stopping the I2C bus.</short>
        <long>&#10; An interface for stopping the I2C bus. Needed by the resource&#10; reservation system, so that when a client releases you're sure&#10; there's a stop.&#10;&#10; @author Philip Levis&#10;&#10; @version  $Id: Atm128I2C.nc,v 1.4 2006-12-12 18:23:03 vlahan Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="stop" ref="0x409d53d0" loc="46:/opt/tinyos/tos/chips/atm128/i2c/Atm128I2C.nc">
        <interfacedef-ref qname="Atm128I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128I2CBus" loc="47:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
      <documentation loc="37:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <short>&#10; This driver implements direct I2C register access and a blocking master&#10; controller for the ATmega128 via a Hardware Platform Layer (HPL) to its  &#10; two-wire-interface (TWI) hardware subsystem.</short>
        <long>&#10; This driver implements direct I2C register access and a blocking master&#10; controller for the ATmega128 via a Hardware Platform Layer (HPL) to its  &#10; two-wire-interface (TWI) hardware subsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Philip Levis&#10;&#10; @version  $Id: HplAtm128I2CBus.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="readCurrent" ref="0x409f4b78" loc="54:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sendCommand" ref="0x409f2010" loc="55:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStart" ref="0x409f2940" loc="60:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x409f27e8" loc="60:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="status" ref="0x409f4798" loc="52:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasAcks" ref="0x40a12010" loc="65:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x40a0f270" loc="84:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x40a12590" loc="67:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enable" ref="0x40a12438" loc="67:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x40a0e010" loc="89:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x409f4010" loc="49:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="hasExternalPulldown" ref="0x409f7e50" loc="49:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAck" ref="0x40a13bb8" loc="64:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enable" ref="0x40a13a60" loc="64:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x40a12a68" loc="68:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasStart" ref="0x409f2d38" loc="61:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x40a10398" loc="75:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="commandComplete" ref="0x409f2418" loc="56:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x40a10e58" loc="83:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x40a10d00" loc="83:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x40a0fbf0" loc="88:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40a0fa98" loc="88:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRealInterruptPending" ref="0x40a12f08" loc="72:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x409f43a0" loc="50:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStop" ref="0x40a13288" loc="62:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x40a13130" loc="62:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptPending" ref="0x40a10958" loc="81:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x40a10800" loc="81:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x40a0f6b8" loc="85:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasStop" ref="0x40a13670" loc="63:/opt/tinyos/tos/chips/atm128/i2c/HplAtm128I2CBus.nc">
        <interfacedef-ref qname="HplAtm128I2CBus"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403246e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
